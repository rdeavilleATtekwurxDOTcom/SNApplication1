<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>false</active>
        <api_name>x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SoftDeleteOfTestCIsAndRelsOBSOLETE</name>
        <script><![CDATA[// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().restoreSoftDeletesSilently();

// Where sys_id is the sys_id from the x_tekso_twxapp01_generate_test_data record
// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIs(1.sys_id);
// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIRelationships(1,sys_id);

var SoftDeleteOfTestCIsAndRelsOBSOLETE = Class.create();
SoftDeleteOfTestCIsAndRelsOBSOLETE.prototype = {
    initialize: function() {
    },

	restoreSoftDeletesSilently: function(gen_sys_id) {
		this.restoreSoftDeletedCIsSilently(gen_sys_id);
		this.restoreSoftDeletedCIRelationshipsSilently(gen_sys_id);
	},
	
	restoreSoftDeletesSilentlyAll: function() {
		this.restoreSoftDeletedCIsSilentlyAll();
		this.restoreSoftDeletedCIRelationshipsSilentlyAll();
	},
	
	softDeleteCIs: function(qty,gen_sys_id) {

		var genTable = 'x_tekso_twxapp01_generate_test_data';
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';

		var gr1 = new GlideRecord(genTable);
		gr1.addQuery('sys_id',gen_sys_id);
		gr1.query();
		if (gr1.next()) {
			gr1.setValue('build_delete_cmdb_ci_test_data_started',true);
			var gdt = new GlideDateTime();
			gr1.setValue('build_delete_cmdb_ci_test_data_started_at',gdt);		
			var alreadyStarted = gr1.getValue('build_test_data_started') || false;
			if (alreadyStarted == false) {
				gr1.setValue('build_test_data_started',true);
				gr1.setValue('build_test_data_started_at',gdt);				
			}			
			gr1.setWorkflow(false);
			gr1.update();
		}
		
		var gr2 = new GlideRecord(ciTable);
		if (qty > 0) {
			gr2.setLimit(qty);	
		}
		gr2.addQuery('soft_delete',false);
		// To stop clashing with another job that may be running
		gr2.addQuery('generate_test_data_in_progress',false);
		gr2.query();
		while (gr2.next()) {
			//BR's are triggered
			//BR Test Configuration Item - Delete Rels will update soft_delete flag on the rels
			gr2.setValue('soft_delete',true);
			// To stop clashing with another job that may be running
			gr2.setValue('generate_test_data_in_progress',true);
			gr2.setValue('generate_test_data_record_sys_id',gen_sys_id);		
			gr2.update();		
		}

		var gdt2 = new GlideDateTime();		
		var gr3 = new GlideRecord(genTable);
		gr3.addQuery('sys_id',gen_sys_id);
		gr3.query();
		if (gr3.next()) {			
			gr3.setValue('build_delete_cmdb_ci_test_data_completed',true);
			gr3.setValue('build_delete_cmdb_ci_test_data_completed_at',gdt2);	
			gr3.setWorkflow(false);
			gr3.update();
		}
		
		// Check if we have totally finished - i.e. was this the last thing that was needed to complete
		// or is there other stuff that is still outstanding
		var gr4 = new GlideRecord(genTable);
		gr4.addQuery('sys_id',gen_sys_id);
		gr4.query();
		if (gr4.next()) {
			var delCIQty = gr4.getValue('delete_cmdb_ci_qty') || 0; 
			var delRelQty = gr4.getValue('delete_relations_qty') || 0;
			var updRelQty = gr4.getValue('update_relations_qty') || 0;
			var updServQty = gr4.getValue('update_server_ci_qty') || 0;	
			var updApplQty = gr4.getValue('update_application_ci_qty') || 0; 					
			var delCICmp = gr4.getValue('build_delete_cmdb_ci_test_data_completed') || false;
			var delRelCmp = gr4.getValue('build_delete_relations_test_data_completed') || false;
			var updRelCmp = gr4.getValue('build_update_relations_test_data_completed') || false;
			var updServCmp = gr4.getValue('build_update_server_ci_test_data_completed') || false;
			var updApplCmp = gr4.getValue('build_update_application_ci_test_data_completed') || false;

			if (delCIQty < 1 || (delCIQty > 0 && delCICmp == true)) {
				if (delRelQty < 1 || (delRelQty > 0 && delRelCmp == true)) {
					if (updRelQty < 1 || (updRelQty > 0 && updRelCmp == true)) {
						if (updServQty < 1 || (updServQty > 0 && updServCmp == true)) {
							if (updApplQty < 1 || (updApplQty > 0 && updApplCmp == true)) {
								// All done
								gr4.setValue('build_test_data_completed',true);
								gr4.setValue('build_test_data_completed_at',gdt2);
								//Need to put this through GlideDateTime()
								var strt = new GlideDateTime(gr4.getValue('build_test_data_started_at'));
								var dur = new GlideDuration();
								dur = GlideDateTime.subtract(strt,gdt2);														
								gr4.setValue('time_taken_to_build_test_data',dur);										
								gr4.setValue('status','Test Data Build Complete');								
								gr4.setWorkflow(false);
								gr4.update();
		
							}
						}
					}
				}
			}			
		} //if (gr4.next()) {
	},

	softDeleteCIRelationships: function(qty,gen_sys_id) {

		var genTable = 'x_tekso_twxapp01_generate_test_data';
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		
		var gr1 = new GlideRecord(genTable);
		gr1.addQuery('sys_id',gen_sys_id);
		gr1.query();
		if (gr1.next()) {
			gr1.setValue('build_delete_relations_test_data_started',true);
			var gdt = new GlideDateTime();
			gr1.setValue('build_delete_relations_test_data_started_at',gdt);	
			var alreadyStarted = gr1.getValue('build_test_data_started') || false;
			if (alreadyStarted == false) {
				gr1.setValue('build_test_data_started',true);
				gr1.setValue('build_test_data_started_at',gdt);				
			}			
			gr1.setWorkflow(false);
			gr1.update();
		}
		
		var gr2 = new GlideRecord(relTable);
		if (qty > 0) {
			gr2.setLimit(qty);	
		}
		gr2.addQuery('soft_delete',false);
		// To stop clashing with another job that may be running
		gr2.addQuery('generate_test_data_in_progress',false);		
		gr2.query();		
		gr2.setValue('soft_delete',true);
		// To stop clashing with another job that may be running
		gr2.setValue('generate_test_data_in_progress',true);
		gr2.setValue('generate_test_data_record_sys_id',gen_sys_id);		
		gr2.updateMultiple();
		/*
		while (gr2.next()) {			
			gr2.setValue('soft_delete',true);
			gr2.update();
		}
		*/
		var gdt2 = new GlideDateTime();
		var gr3 = new GlideRecord(genTable);
		gr3.addQuery('sys_id',gen_sys_id);
		gr3.query();
		if (gr3.next()) {
			gr3.setValue('build_delete_relations_test_data_completed',true);
			gr3.setValue('build_delete_relations_test_data_completed_at',gdt2);		
			gr3.setWorkflow(false);
			gr3.update();
		}

		// Check if we have totally finished - i.e. was this the last thing that was needed to complete
		// or is there other stuff that is still outstanding
		var gr4 = new GlideRecord(genTable);
		gr4.addQuery('sys_id',gen_sys_id);
		gr4.query();
		if (gr4.next()) {
			var delCIQty = gr4.getValue('delete_cmdb_ci_qty') || 0; 
			var delRelQty = gr4.getValue('delete_relations_qty') || 0;
			var updRelQty = gr4.getValue('update_relations_qty') || 0;
			var updServQty = gr4.getValue('update_server_ci_qty') || 0;	
			var updApplQty = gr4.getValue('update_application_ci_qty') || 0; 					
			var delCICmp = gr4.getValue('build_delete_cmdb_ci_test_data_completed') || false;
			var delRelCmp = gr4.getValue('build_delete_relations_test_data_completed') || false;
			var updRelCmp = gr4.getValue('build_update_relations_test_data_completed') || false;
			var updServCmp = gr4.getValue('build_update_server_ci_test_data_completed') || false;
			var updApplCmp = gr4.getValue('build_update_application_ci_test_data_completed') || false;

			if (delCIQty < 1 || (delCIQty > 0 && delCICmp == true)) {
				if (delRelQty < 1 || (delRelQty > 0 && delRelCmp == true)) {
					if (updRelQty < 1 || (updRelQty > 0 && updRelCmp == true)) {
						if (updServQty < 1 || (updServQty > 0 && updServCmp == true)) {
							if (updApplQty < 1 || (updApplQty > 0 && updApplCmp == true)) {
								// All done
								gr4.setValue('build_test_data_completed',true);
								gr4.setValue('build_test_data_completed_at',gdt2);
								gr4.setValue('status','Test Data Build Complete');	
								//Need to put this through GlideDateTime()
								var strt = new GlideDateTime(gr4.getValue('build_test_data_started_at'));
								var dur = new GlideDuration();
								dur = GlideDateTime.subtract(strt,gdt2);														
								gr4.setValue('time_taken_to_build_test_data',dur);										
								gr4.setWorkflow(false);
								gr4.update();

							}
						}
					}
				}
			}			
		} //if (gr4.next()) {		
	},

	restoreSoftDeletedCIsSilently: function(gen_sys_id) {
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';
		var gr1 = new GlideRecord(ciTable);
		gr1.addQuery('soft_delete',true);
		// To stop clashing with another job that may be running
		gr1.addQuery('generate_test_data_in_progress',true);
		gr1.addQuery('generate_test_data_record_sys_id',gen_sys_id);			
		gr1.query();
		// Do not trigger Business Rules	
		gr1.setWorkflow(false);		
		gr1.setValue('soft_delete',false);
		// To stop clashing with another job that may be running
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');			
		gr1.updateMultiple();
		
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},

	restoreSoftDeletedCIsSilentlyAll: function() {
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';
		var gr1 = new GlideRecord(ciTable);
		gr1.addQuery('soft_delete',true);
		gr1.query();
		// Do not trigger Business Rules	
		gr1.setWorkflow(false);		
		gr1.setValue('soft_delete',false);
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');
		gr1.updateMultiple();
		
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},
	
	restoreSoftDeletedCIRelationshipsSilently: function (gen_sys_id) {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('soft_delete',true);
		// To stop clashing with another job that may be running
		gr1.addQuery('generate_test_data_in_progress',true);
		gr1.addQuery('generate_test_data_record_sys_id',gen_sys_id);			
		gr1.query();
		// Do not trigger Business Rules
		gr1.setWorkflow(false);	
		gr1.setValue('soft_delete',false);
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');		
		gr1.updateMultiple();
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},

	restoreSoftDeletedCIRelationshipsSilentlyAll: function () {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('soft_delete',true);
		gr1.query();
		// Do not trigger Business Rules
		gr1.setWorkflow(false);	
		gr1.setValue('soft_delete',false);
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');
		gr1.updateMultiple();
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},	
    type: 'SoftDeleteOfTestCIsAndRelsOBSOLETE'
};

/* Example Calling

new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().restoreSoftDeletesSilently();
// Where sys_id is the sys_id from the x_tekso_twxapp01_generate_test_data record
new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIs(1,sys_id);
new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIRelationships(1,sys_id);

or

var si = new  x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE();
si.restoreSoftDeletesSilently();

*/
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-04-15 10:18:54</sys_created_on>
        <sys_id>b0ec1a7bdb84d81041d08f38139619cf</sys_id>
        <sys_mod_count>26</sys_mod_count>
        <sys_name>SoftDeleteOfTestCIsAndRelsOBSOLETE</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_b0ec1a7bdb84d81041d08f38139619cf</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-05-28 17:28:40</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Application 1">993be4b2db62085035a38a72399619a7</application>
        <file_path/>
        <instance_id>29531a01dba58c1852dd2f17d496198c</instance_id>
        <instance_name>ven03409</instance_name>
        <name>sys_script_include_b0ec1a7bdb84d81041d08f38139619cf</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;false&lt;/active&gt;&lt;api_name&gt;x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;SoftDeleteOfTestCIsAndRelsOBSOLETE&lt;/name&gt;&lt;script&gt;&lt;![CDATA[// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().restoreSoftDeletesSilently();

// Where sys_id is the sys_id from the x_tekso_twxapp01_generate_test_data record
// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIs(1.sys_id);
// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIRelationships(1,sys_id);

var SoftDeleteOfTestCIsAndRelsOBSOLETE = Class.create();
SoftDeleteOfTestCIsAndRelsOBSOLETE.prototype = {
    initialize: function() {
    },

	restoreSoftDeletesSilently: function(gen_sys_id) {
		this.restoreSoftDeletedCIsSilently(gen_sys_id);
		this.restoreSoftDeletedCIRelationshipsSilently(gen_sys_id);
	},
	
	restoreSoftDeletesSilentlyAll: function() {
		this.restoreSoftDeletedCIsSilentlyAll();
		this.restoreSoftDeletedCIRelationshipsSilentlyAll();
	},
	
	softDeleteCIs: function(qty,gen_sys_id) {

		var genTable = 'x_tekso_twxapp01_generate_test_data';
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';

		var gr1 = new GlideRecord(genTable);
		gr1.addQuery('sys_id',gen_sys_id);
		gr1.query();
		if (gr1.next()) {
			gr1.setValue('build_delete_cmdb_ci_test_data_started',true);
			var gdt = new GlideDateTime();
			gr1.setValue('build_delete_cmdb_ci_test_data_started_at',gdt);		
			var alreadyStarted = gr1.getValue('build_test_data_started') || false;
			if (alreadyStarted == false) {
				gr1.setValue('build_test_data_started',true);
				gr1.setValue('build_test_data_started_at',gdt);				
			}			
			gr1.setWorkflow(false);
			gr1.update();
		}
		
		var gr2 = new GlideRecord(ciTable);
		if (qty &gt; 0) {
			gr2.setLimit(qty);	
		}
		gr2.addQuery('soft_delete',false);
		// To stop clashing with another job that may be running
		gr2.addQuery('generate_test_data_in_progress',false);
		gr2.query();
		while (gr2.next()) {
			//BR's are triggered
			//BR Test Configuration Item - Delete Rels will update soft_delete flag on the rels
			gr2.setValue('soft_delete',true);
			// To stop clashing with another job that may be running
			gr2.setValue('generate_test_data_in_progress',true);
			gr2.setValue('generate_test_data_record_sys_id',gen_sys_id);		
			gr2.update();		
		}

		var gdt2 = new GlideDateTime();		
		var gr3 = new GlideRecord(genTable);
		gr3.addQuery('sys_id',gen_sys_id);
		gr3.query();
		if (gr3.next()) {			
			gr3.setValue('build_delete_cmdb_ci_test_data_completed',true);
			gr3.setValue('build_delete_cmdb_ci_test_data_completed_at',gdt2);	
			gr3.setWorkflow(false);
			gr3.update();
		}
		
		// Check if we have totally finished - i.e. was this the last thing that was needed to complete
		// or is there other stuff that is still outstanding
		var gr4 = new GlideRecord(genTable);
		gr4.addQuery('sys_id',gen_sys_id);
		gr4.query();
		if (gr4.next()) {
			var delCIQty = gr4.getValue('delete_cmdb_ci_qty') || 0; 
			var delRelQty = gr4.getValue('delete_relations_qty') || 0;
			var updRelQty = gr4.getValue('update_relations_qty') || 0;
			var updServQty = gr4.getValue('update_server_ci_qty') || 0;	
			var updApplQty = gr4.getValue('update_application_ci_qty') || 0; 					
			var delCICmp = gr4.getValue('build_delete_cmdb_ci_test_data_completed') || false;
			var delRelCmp = gr4.getValue('build_delete_relations_test_data_completed') || false;
			var updRelCmp = gr4.getValue('build_update_relations_test_data_completed') || false;
			var updServCmp = gr4.getValue('build_update_server_ci_test_data_completed') || false;
			var updApplCmp = gr4.getValue('build_update_application_ci_test_data_completed') || false;

			if (delCIQty &lt; 1 || (delCIQty &gt; 0 &amp;&amp; delCICmp == true)) {
				if (delRelQty &lt; 1 || (delRelQty &gt; 0 &amp;&amp; delRelCmp == true)) {
					if (updRelQty &lt; 1 || (updRelQty &gt; 0 &amp;&amp; updRelCmp == true)) {
						if (updServQty &lt; 1 || (updServQty &gt; 0 &amp;&amp; updServCmp == true)) {
							if (updApplQty &lt; 1 || (updApplQty &gt; 0 &amp;&amp; updApplCmp == true)) {
								// All done
								gr4.setValue('build_test_data_completed',true);
								gr4.setValue('build_test_data_completed_at',gdt2);
								//Need to put this through GlideDateTime()
								var strt = new GlideDateTime(gr4.getValue('build_test_data_started_at'));
								var dur = new GlideDuration();
								dur = GlideDateTime.subtract(strt,gdt2);														
								gr4.setValue('time_taken_to_build_test_data',dur);										
								gr4.setValue('status','Test Data Build Complete');								
								gr4.setWorkflow(false);
								gr4.update();
		
							}
						}
					}
				}
			}			
		} //if (gr4.next()) {
	},

	softDeleteCIRelationships: function(qty,gen_sys_id) {

		var genTable = 'x_tekso_twxapp01_generate_test_data';
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		
		var gr1 = new GlideRecord(genTable);
		gr1.addQuery('sys_id',gen_sys_id);
		gr1.query();
		if (gr1.next()) {
			gr1.setValue('build_delete_relations_test_data_started',true);
			var gdt = new GlideDateTime();
			gr1.setValue('build_delete_relations_test_data_started_at',gdt);	
			var alreadyStarted = gr1.getValue('build_test_data_started') || false;
			if (alreadyStarted == false) {
				gr1.setValue('build_test_data_started',true);
				gr1.setValue('build_test_data_started_at',gdt);				
			}			
			gr1.setWorkflow(false);
			gr1.update();
		}
		
		var gr2 = new GlideRecord(relTable);
		if (qty &gt; 0) {
			gr2.setLimit(qty);	
		}
		gr2.addQuery('soft_delete',false);
		// To stop clashing with another job that may be running
		gr2.addQuery('generate_test_data_in_progress',false);		
		gr2.query();		
		gr2.setValue('soft_delete',true);
		// To stop clashing with another job that may be running
		gr2.setValue('generate_test_data_in_progress',true);
		gr2.setValue('generate_test_data_record_sys_id',gen_sys_id);		
		gr2.updateMultiple();
		/*
		while (gr2.next()) {			
			gr2.setValue('soft_delete',true);
			gr2.update();
		}
		*/
		var gdt2 = new GlideDateTime();
		var gr3 = new GlideRecord(genTable);
		gr3.addQuery('sys_id',gen_sys_id);
		gr3.query();
		if (gr3.next()) {
			gr3.setValue('build_delete_relations_test_data_completed',true);
			gr3.setValue('build_delete_relations_test_data_completed_at',gdt2);		
			gr3.setWorkflow(false);
			gr3.update();
		}

		// Check if we have totally finished - i.e. was this the last thing that was needed to complete
		// or is there other stuff that is still outstanding
		var gr4 = new GlideRecord(genTable);
		gr4.addQuery('sys_id',gen_sys_id);
		gr4.query();
		if (gr4.next()) {
			var delCIQty = gr4.getValue('delete_cmdb_ci_qty') || 0; 
			var delRelQty = gr4.getValue('delete_relations_qty') || 0;
			var updRelQty = gr4.getValue('update_relations_qty') || 0;
			var updServQty = gr4.getValue('update_server_ci_qty') || 0;	
			var updApplQty = gr4.getValue('update_application_ci_qty') || 0; 					
			var delCICmp = gr4.getValue('build_delete_cmdb_ci_test_data_completed') || false;
			var delRelCmp = gr4.getValue('build_delete_relations_test_data_completed') || false;
			var updRelCmp = gr4.getValue('build_update_relations_test_data_completed') || false;
			var updServCmp = gr4.getValue('build_update_server_ci_test_data_completed') || false;
			var updApplCmp = gr4.getValue('build_update_application_ci_test_data_completed') || false;

			if (delCIQty &lt; 1 || (delCIQty &gt; 0 &amp;&amp; delCICmp == true)) {
				if (delRelQty &lt; 1 || (delRelQty &gt; 0 &amp;&amp; delRelCmp == true)) {
					if (updRelQty &lt; 1 || (updRelQty &gt; 0 &amp;&amp; updRelCmp == true)) {
						if (updServQty &lt; 1 || (updServQty &gt; 0 &amp;&amp; updServCmp == true)) {
							if (updApplQty &lt; 1 || (updApplQty &gt; 0 &amp;&amp; updApplCmp == true)) {
								// All done
								gr4.setValue('build_test_data_completed',true);
								gr4.setValue('build_test_data_completed_at',gdt2);
								gr4.setValue('status','Test Data Build Complete');	
								//Need to put this through GlideDateTime()
								var strt = new GlideDateTime(gr4.getValue('build_test_data_started_at'));
								var dur = new GlideDuration();
								dur = GlideDateTime.subtract(strt,gdt2);														
								gr4.setValue('time_taken_to_build_test_data',dur);										
								gr4.setWorkflow(false);
								gr4.update();

							}
						}
					}
				}
			}			
		} //if (gr4.next()) {		
	},

	restoreSoftDeletedCIsSilently: function(gen_sys_id) {
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';
		var gr1 = new GlideRecord(ciTable);
		gr1.addQuery('soft_delete',true);
		// To stop clashing with another job that may be running
		gr1.addQuery('generate_test_data_in_progress',true);
		gr1.addQuery('generate_test_data_record_sys_id',gen_sys_id);			
		gr1.query();
		// Do not trigger Business Rules	
		gr1.setWorkflow(false);		
		gr1.setValue('soft_delete',false);
		// To stop clashing with another job that may be running
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');			
		gr1.updateMultiple();
		
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},

	restoreSoftDeletedCIsSilentlyAll: function() {
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';
		var gr1 = new GlideRecord(ciTable);
		gr1.addQuery('soft_delete',true);
		gr1.query();
		// Do not trigger Business Rules	
		gr1.setWorkflow(false);		
		gr1.setValue('soft_delete',false);
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');
		gr1.updateMultiple();
		
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},
	
	restoreSoftDeletedCIRelationshipsSilently: function (gen_sys_id) {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('soft_delete',true);
		// To stop clashing with another job that may be running
		gr1.addQuery('generate_test_data_in_progress',true);
		gr1.addQuery('generate_test_data_record_sys_id',gen_sys_id);			
		gr1.query();
		// Do not trigger Business Rules
		gr1.setWorkflow(false);	
		gr1.setValue('soft_delete',false);
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');		
		gr1.updateMultiple();
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},

	restoreSoftDeletedCIRelationshipsSilentlyAll: function () {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('soft_delete',true);
		gr1.query();
		// Do not trigger Business Rules
		gr1.setWorkflow(false);	
		gr1.setValue('soft_delete',false);
		gr1.setValue('generate_test_data_in_progress',false);
		gr1.setValue('generate_test_data_record_sys_id','');
		gr1.updateMultiple();
		/*
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
		*/
	},	
    type: 'SoftDeleteOfTestCIsAndRelsOBSOLETE'
};

/* Example Calling

new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().restoreSoftDeletesSilently();
// Where sys_id is the sys_id from the x_tekso_twxapp01_generate_test_data record
new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIs(1,sys_id);
new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE().softDeleteCIRelationships(1,sys_id);

or

var si = new  x_tekso_twxapp01.SoftDeleteOfTestCIsAndRelsOBSOLETE();
si.restoreSoftDeletesSilently();

*/
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;robin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-04-15 10:18:54&lt;/sys_created_on&gt;&lt;sys_id&gt;b0ec1a7bdb84d81041d08f38139619cf&lt;/sys_id&gt;&lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;&lt;sys_name&gt;SoftDeleteOfTestCIsAndRelsOBSOLETE&lt;/sys_name&gt;&lt;sys_package display_value="Application 1" source="x_tekso_twxapp01"&gt;993be4b2db62085035a38a72399619a7&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Application 1"&gt;993be4b2db62085035a38a72399619a7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_b0ec1a7bdb84d81041d08f38139619cf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;robin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-05-28 17:28:40&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1710871587</payload_hash>
        <record_name>SoftDeleteOfTestCIsAndRelsOBSOLETE</record_name>
        <reverted_from/>
        <source>28d93fccdb34181041d08f38139619f8</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-05-28 17:28:40</sys_created_on>
        <sys_id>a42d91bddb0958104f29252b13961987</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1725c542fae0000001</sys_recorded_at>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-05-28 17:28:40</sys_updated_on>
        <type>Script Include</type>
        <update_guid>ec2d91bdf60958103b827efa10271986</update_guid>
        <update_guid_history>ec2d91bdf60958103b827efa10271986:1710871587,2527c5618f49d8507758c8a5232d2371:-1388653649,d4d530a16209d8501a3265fe41668f3f:698045545,b6a274ed24c5d850c3b773da110c924c:708270260,d222f86d2cc5d850d7d45a92413888ad:494767280,c6dbe06986c5d8507d33a610a59d8772:1802051979,912d082da745d850cb1fa6dbe1fa294c:-1231471826,2b6abf1d9b05d85018c74dc653b35e16:984092402,90c26a0d7441d41079d4c30569fed757:1606236541,54849ecdb301d410ef9181d5af60ca0a:993363184,a5a70daeb87810502e23e6d50b2d7289:374851189,5be231ed83705c10d354f0bff6786c0b:-1753493421,a1e67c25a2bc1c10b91777f7d9a11632:1020030572,5156382507bc1c10cf9d82949751095f:1931030468,30ac3f85be3cd8107935f882384c2e17:956054560,96e9b7c16c3cd8108943eb19409d48e4:1394106362,cc5ca3c5d9f8d8104873ce8cd6aed254:-52120211,5228274187f8d810072032af159c396f:853016028,6695e34166f8d810a5f9d780f15dd1cf:1299724097,a5aeb6a463349810c23757edf7eeca75:-868566946,a94eb6a46f3498109d3e87c9a0234780:-1181504153,663cb26c68f098107cb59345cc590955:-206848736,426b366ce1b098105ff8e5b9fafde1b3:-1419736962,dd3b326ccab098104ce2f16e94cd079e:-1882235980,be19fae8c8b09810049a5c0e13479e37:-1127754819,b348fe68d0b09810b54051a84a034cd7:-684548336,796ed2fb8284d8104d9d0f4f8dd2ea5f:-65815763</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-06-03 08:41:14</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>015ac9b05cef41c08011271288138400</sys_id>
        <sys_metadata>b0ec1a7bdb84d81041d08f38139619cf</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SoftDeleteOfTestCIsAndRelsOBSOLETE</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_parent/>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_scope_delete display_value="">5f4484af6af94780855e3e0c0b5eb404</sys_scope_delete>
        <sys_update_name>sys_script_include_b0ec1a7bdb84d81041d08f38139619cf</sys_update_name>
        <sys_update_version display_value="sys_script_include_b0ec1a7bdb84d81041d08f38139619cf">a42d91bddb0958104f29252b13961987</sys_update_version>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-06-03 08:41:14</sys_updated_on>
    </sys_metadata_delete>
</record_update>

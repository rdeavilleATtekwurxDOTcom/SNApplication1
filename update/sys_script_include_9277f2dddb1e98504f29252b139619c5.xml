<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.CheckScheduledJob</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CheckScheduledJob</name>
        <script><![CDATA[/*

var rtn = new x_tekso_twxapp01.CheckScheduledJob().checkAndUpdateScheduledJobRunTypePeriodically(name,interval);

*/

var CheckScheduledJob = Class.create();
CheckScheduledJob.prototype = {
    initialize: function() {
    },

	// Checks the job exists and tries to set it to active
	checkAndUpdateScheduledJob: function(name) {
		var name2 = name.toString();
		var rtn = 'Problem with scheduled job: ' + name2;
		var jobSysID = this.getScheduledJobSysID(name2);
		if (jobSysID.length > 0) {
			//got job sys_id
			var activeState = this.getScheduledJobActiveState(jobSysID);
			if (activeState == 'active') {
				// Everything is ok
				rtn = 'ok';
			}		
			else {
				// Need to update
				this.updateScheduledJobBySysIDMakeActive(jobSysID);
				
				// Check update was successful
				var activeState2 = this.getScheduledJobActiveState(jobSysID);
				if (activeState2 == 'active') {		
					// all ok
					rtn = 'ok Updated scheduled job: ' + name2 + ' set Active: True';
				}	
				else {
					//Unable to set active
					rtn = 'Problem with scheduled job: ' + name2 + ' unable set Active';
				}	
			}
		}
		else {
			//Job does not exist
			rtn = 'Unable to find scheduled job: ' + name2;
		}
		return rtn;					
	},
	
	checkAndUpdateScheduledJobRunTypePeriodically: function(name,interval) {

		var interval2 = parseInt(interval);
		var name2 = name.toString();
		var rtn = 'Problem with scheduled job: ' + name2;
		var jobSysID = this.getScheduledJobSysID(name2);
		if (jobSysID.length > 0) {
			//got job sys_id
			var activeState = this.getScheduledJobActiveState(jobSysID);
			var runPeriod = this.getScheduledJobRunPeriod(jobSysID);
			var runType = this.getScheduledJobRunType(jobSysID);
			if (activeState == 'active' && runType == 'periodically' && runPeriod == interval2) {
				// Everything is ok
				rtn = 'ok';
			}
			else {
				// Need to update
				this.updateScheduledJobBySysIDMakeRunTypePeriodically(jobSysID,interval2);
				
				// Check update was successful
				var activeState2 = this.getScheduledJobActiveState(jobSysID);
				if (activeState2 == 'active') {
					var runType2 = this.getScheduledJobRunType(jobSysID);
					if (runType2 == 'periodically') {
						var runPeriod2 = this.getScheduledJobRunPeriod(jobSysID);	
						if (runPeriod2 == interval2) {
							// all ok
							rtn = 'ok';
							var whatsChangedArr = [];
							var whatsChanged = '';
							if (activeState != activeState2) {
								whatsChangedArr.push('Active: True');
							}
							if (runType != runType2) {
								whatsChangedArr.push('Run: Periodically');
							}
							if (runPeriod != runPeriod2) {
								whatsChangedArr.push('Repeat Interval: ' + runPeriod2.toString());
							}
							if (whatsChangedArr.length > 0) {
								whatsChanged = whatsChangedArr.join(', ');
								rtn = 'ok Updated scheduled job: ' + name2 + ' set ' + whatsChanged;
							}							
						}
						else {
							// Unable to set run period
							rtn = 'Problem with scheduled job: ' + name2 + ' unable to update the interval';
						}
					}
					else {
						//Unable to set to periodically
						rtn = 'Problem with scheduled job: ' + name2 + ' unable to set to Periodically';
					}
				}
				else {
					//Unable to set active
					rtn = 'Problem with scheduled job: ' + name2 + ' unable set Active';
				}				
			}
		}
		else {
			//Job does not exist
			rtn = 'Unable to find scheduled job: ' + name2;
		}
		return rtn;
	},
	
	getScheduledJobSysID: function(name) {
		var rtn = '';

		var name2 = name.toString();
		if (name2.length > 0) {
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('name',name2);
			gr1.query();	
			if (gr1.next()) {
				var sys_id = gr1.getValue('sys_id');
				rtn = sys_id.toString();
			}
		}
		return rtn;
	},
	
	getScheduledJobRunPeriod: function(sys_id) {
		var rtn = 0;
		var sys_id2 = sys_id.toString();
		if (sys_id2.length > 0) {
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();
			if (gr1.next()) {
				var runPeriod = gr1.getValue('run_period');
				var runPeriodDT = new GlideDateTime(runPeriod);
				var ms = runPeriodDT.getNumericValue(); //returns the duration in milliseconds.
				var minutes = ms / 1000 / 60; // div by 1000 to get secs // div by 60 to get mins
				rtn = parseInt(minutes);
			}
		}
		return rtn;				
	},
	
	getScheduledJobRunType: function(sys_id) {
		var rtn = '';
		var sys_id2 = sys_id.toString();
		if (sys_id2.length > 0) {
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();
			if (gr1.next()) {
				var runType = gr1.getValue('run_type') || '';
				rtn = runType.toString();
			}
		}
		return rtn;		
	},
	
	getScheduledJobActiveState: function(sys_id) {
		var rtn = '';
		var sys_id2 = sys_id.toString();
		if (sys_id2.length > 0) {
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();
			if (gr1.next()) {
				var active = gr1.getValue('active') || false;
				if (active == true) {
					rtn = 'active';
				}
			}
		}
		return rtn;
	},
	
	updateScheduledJobBySysIDMakeRunTypePeriodically: function(jobSysID,interval) {
		new x_tekso_twxapp01.UpdateScheduledJob().updateScheduledJobBySysIDMakeRunTypePeriodically(jobSysID,interval);
	},
	
	updateScheduledJobBySysIDMakeActive: function(jobSysID) {
		new x_tekso_twxapp01.UpdateScheduledJob().updateScheduledJobBySysIDMakeActive(jobSysID);		
	},
	
    type: 'CheckScheduledJob'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-07-28 14:08:59</sys_created_on>
        <sys_id>9277f2dddb1e98504f29252b139619c5</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>CheckScheduledJob</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_9277f2dddb1e98504f29252b139619c5</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-07-28 17:38:50</sys_updated_on>
    </sys_script_include>
</record_update>

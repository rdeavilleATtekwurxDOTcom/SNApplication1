<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SoftDeleteOfTestCIsAndRels</name>
        <script><![CDATA[// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels().restoreSoftDeletesSilently();

// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels().softDeleteCIs(1);

// new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels().softDeleteCIRelationships(1);

var SoftDeleteOfTestCIsAndRels = Class.create();
SoftDeleteOfTestCIsAndRels.prototype = {
    initialize: function() {
    },

	restoreSoftDeletesSilently: function() {
		this.restoreSoftDeletedCIsSilently();
		this.restoreSoftDeletedCIRelationshipsSilently();
	},
	
	softDeleteCIs: function(qty) {
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';
		var gr1 = new GlideRecord(ciTable);
		if (qty > 0) {
			gr1.setLimit(qty);	
		}
		gr1.addQuery('soft_delete',false);
		gr1.query();
		while (gr1.next()) {		
			//BR's are triggered
			//BR Test Configuration Item - Delete Rels will update soft_delete flag on the rels
			gr1.setValue('soft_delete',true);
			gr1.update();
		}
	},

	softDeleteCIRelationships: function(qty) {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		if (qty > 0) {
			gr1.setLimit(qty);	
		}
		gr1.addQuery('soft_delete',false);
		gr1.query();
		while (gr1.next()) {			
			gr1.setValue('soft_delete',true);
			gr1.update();
		}
	},

	restoreSoftDeletedCIsSilently: function() {
		var ciTable = 'x_tekso_twxapp01_test_configuration_item';
		var gr1 = new GlideRecord(ciTable);
		gr1.addQuery('soft_delete',true);
		gr1.query();
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}
	},

	restoreSoftDeletedCIRelationshipsSilently: function () {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('soft_delete',true);
		gr1.query();
		while (gr1.next()) {
			// Do not trigger Business Rules	
			gr1.setWorkflow(false);				
			gr1.setValue('soft_delete',false);
			gr1.update();
		}	
	},
	
    type: 'SoftDeleteOfTestCIsAndRels'
};

/* Example Calling

new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels().restoreSoftDeletesSilently();
new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels().softDeleteCIs(1);
new x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels().softDeleteCIRelationships(1);

or

var si = new  x_tekso_twxapp01.SoftDeleteOfTestCIsAndRels();
si.restoreSoftDeletesSilently();

*/
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-04-15 10:18:54</sys_created_on>
        <sys_id>b0ec1a7bdb84d81041d08f38139619cf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SoftDeleteOfTestCIsAndRels</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_b0ec1a7bdb84d81041d08f38139619cf</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-04-15 10:18:54</sys_updated_on>
    </sys_script_include>
</record_update>

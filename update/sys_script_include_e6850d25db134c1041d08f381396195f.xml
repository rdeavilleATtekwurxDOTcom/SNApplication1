<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.UpdateScheduledJob</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>UpdateScheduledJob</name>
        <script><![CDATA[/* Example calling
var si = new x_tekso_twxapp01.UpdateScheduledJob();
si.updateScheduledJobByNameMakeRunTypePeriodically('Process Responses From uControl',1);
*/

var UpdateScheduledJob = Class.create();
UpdateScheduledJob.prototype = {
    initialize: function() {
    },
	
	updateScheduledJobBySysIDMakeActive: function(sys_id) {
		var sys_id2 = sys_id.toString();
		if (sys_id2.length > 0) {			
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();	
			if (gr1.next()) {
				gr1.setValue('active',true);
				gr1.update();
			}
		}
	},
	
	updateScheduledJobBySysIDMakeRunTypePeriodically: function(sys_id,intervalMins) {
		var sys_id2 = sys_id.toString();
		var intervalMins2 = parseInt(intervalMins);		
		if (sys_id2.length > 0) {

			var intervalStr = '';
			if (intervalMins2 < 10) {
				intervalStr = '0' + intervalMins2.toString();
			}
			else {
				intervalStr = intervalMins2.toString();	
			}

			// D HH:MM:SS
			var durationStr = '0 00:' + intervalStr + ':00';
			var duration = new GlideDuration(durationStr);			
			
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();	
			if (gr1.next()) {
				gr1.setValue('active',true);
				gr1.setValue('run_type','periodically');
				gr1.setValue('run_period',duration);
				gr1.update();
			}
		}
	},
	
	updateScheduledJobByNameMakeRunTypePeriodically: function(name,intervalMins) {
		//'Process Responses From uControl'
		var name2 = name.toString();		
		var intervalMins2 = parseInt(intervalMins);		
		if (name2.length > 0) {

			var intervalStr = '';
			if (intervalMins2 < 10) {
				intervalStr = '0' + intervalMins2.toString();
			}
			else {
				intervalStr = intervalMins2.toString();	
			}

			// D HH:MM:SS
			var durationStr = '0 00:' + intervalStr + ':00';
			var duration = new GlideDuration(durationStr);			
			
			var gr1 = new GlideRecordSecure('sysauto');
			gr1.addQuery('name',name2);
			gr1.query();	
			if (gr1.next()) {
				gr1.setValue('active',true);
				gr1.setValue('run_type','periodically');
				gr1.setValue('run_period',duration);
				gr1.update();
			}
		}
	},
	
    type: 'UpdateScheduledJob'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-03-01 21:35:55</sys_created_on>
        <sys_id>e6850d25db134c1041d08f381396195f</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>UpdateScheduledJob</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_e6850d25db134c1041d08f381396195f</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-07-28 15:03:50</sys_updated_on>
    </sys_script_include>
</record_update>

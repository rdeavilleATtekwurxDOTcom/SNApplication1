<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.UpdateOfTestRels</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>UpdateOfTestRels</name>
        <script><![CDATA[// new x_tekso_twxapp01.UpdateOfTestRels().restoreAllCMDBRelationRecordsSilently();

// new x_tekso_twxapp01.UpdateOfTestRels().updateCMDBRelationRecords(1);

var UpdateOfTestRels = Class.create();
UpdateOfTestRels.prototype = {
    initialize: function() {
    },
	
	updateCMDBRelationRecords: function(qty) {
		var updateSilently = false;	
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('original_or_alternative','original');
		if (qty > 0) {
			gr1.setLimit(qty);
		}
		gr1.query();
		while (gr1.next()) {
			var sysID = gr1.getValue('sys_id').toString();
			this.updateCMDBRelation(sysID,updateSilently);
		}
	},

	restoreAllCMDBRelationRecordsSilently: function() {
		var updateSilently = true;
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('original_or_alternative','alternative');
		gr1.query();
		while (gr1.next()) {
			var sysID = gr1.getValue('sys_id').toString();
			this.updateCMDBRelation(sysID,updateSilently);
		}
	},

	updateCMDBRelation: function(sys_id,updateSilently) {
		var relTable = 'x_tekso_twxapp01_test_ci_relationship';

		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('sys_id',sys_id);
		gr1.query();
		if (gr1.next()) {
			var originalOrAlternative = gr1.getValue('original_or_alternative').toString();
			var gotAlternativeValues = gr1.getValue('got_alternative_values') || false;

			var typeSysID = gr1.getValue('type').toString();
			var parentSysID = gr1.getValue('parent').toString();
			var childSysID = gr1.getValue('child').toString();
			var connectionStrength = gr1.getValue('connection_strength');
			var port = gr1.getValue('port') || 0;
			var percentOutage = gr1.getValue('percent_outage') || 0;

			if (originalOrAlternative == 'Alternative') {

				var originalTypeSysID = gr1.getValue('original_value_type').toString();
				var originalParentSysID = gr1.getValue('original_value_parent').toString();
				var originalChildSysID = gr1.getValue('original_value_child').toString();
				var originalConnectionStrength = gr1.getValue('original_value_connection_strength');
				var originalPort = gr1.getValue('original_value_port') || 0;
				var originalPercentOutage = gr1.getValue('original_value_percent_outage') || 0;

				gr1.setValue('parent',originalParentSysID);
				gr1.setValue('child',originalChildSysID);
				gr1.setValue('type',originalTypeSysID);
				gr1.setValue('port',originalPort);
				gr1.setValue('percent_outage',originalPercentOutage);	
				gr1.setValue('connection_strength',originalConnectionStrength); // Choice always, cluster, infrequent, occassional
				gr1.setValue('original_or_alternative','Original');
			} // if (originalOrAlternative == 'Alternative')
			else {
				// Original
				if (gotAlternativeValues == true) {

					var alternativeTypeSysID = gr1.getValue('alternative_value_type').toString();
					var alternativeParentSysID = gr1.getValue('alternative_value_parent').toString();
					var alternativeChildSysID = gr1.getValue('alternative_value_child').toString();
					var alternativeConnectionStrength = gr1.getValue('alternative_value_connection_strength');
					var alternativePort = gr1.getValue('alternative_value_port') || 0;
					var alternativePercentOutage = gr1.getValue('alternative_value_percent_outage') || 0;

					gr1.setValue('parent',alternativeParentSysID);
					gr1.setValue('child',alternativeChildSysID);
					gr1.setValue('type',alternativeTypeSysID);
					gr1.setValue('port',alternativePort);
					gr1.setValue('percent_outage',alternativePercentOutage);	
					gr1.setValue('connection_strength',alternativeConnectionStrength); // Choice always, cluster, infrequent, occassional
					gr1.setValue('original_or_alternative','Alternative');
				} // if (gotAlternativeValues == true)
				else {
					// Need to create
					var relTypeSysID1 = this.findOrInsertTestRelType('Runs on','Runs','Runs on::Runs');
					var relTypeSysID2 = this.findOrInsertTestRelType('Depends on','Used by','Depends on::Used by');

					if (typeSysID == relTypeSysID1) {
							alternativeTypeSysID = relTypeSysID2;
					}
					else {
						alternativeTypeSysID = relTypeSysID1;	
					}	

					alternativeParentSysID = childSysID;
					alternativeChildSysID = parentSysID;

					if (connectionStrength == 'always') {
						alternativeConnectionStrength = 'occassional';
					}
					else {
						alternativeConnectionStrength = 'always';
					}

					alternativePort = port + 1;
					alternativePercentOutage = percentOutage + 1;

					gr1.setValue('parent',alternativeParentSysID);
					gr1.setValue('child',alternativeChildSysID);
					gr1.setValue('type',alternativeTypeSysID);
					gr1.setValue('port',alternativePort);
					gr1.setValue('percent_outage',alternativePercentOutage);	
					gr1.setValue('connection_strength',alternativeConnectionStrength); // Choice always, cluster, infrequent, occassional

					gr1.setValue('alternative_value_parent',alternativeParentSysID);
					gr1.setValue('alternative_value_child',alternativeChildSysID);
					gr1.setValue('alternative_value_type',alternativeTypeSysID);
					gr1.setValue('alternative_value_port',alternativePort);
					gr1.setValue('alternative_value_percent_outage',alternativePercentOutage);	
					gr1.setValue('alternative_value_connection_strength',alternativeConnectionStrength); // Choice always, cluster, infrequent, occassional
					gr1.setValue('got_alternative_values',true);
					gr1.setValue('original_or_alternative','Alternative');

				} // if (gotAlternativeValues == true)	
			} // // if (originalOrAlternative == 'Alternative')

			if (updateSilently == true) {
				// Do not trigger Business Rules	
				gr1.setWorkflow(false);			
			}		
			gr1.update();		
		} // if (gr1.next())
	},

	findOrInsertTestRelType: function(parent,child,name) {
		//('Runs on','Runs','Runs on::Runs');
		//('Depends on','Used by','Depends on::Used by');
		var rtnSysID = '';
		relTable = 'x_tekso_twxapp01_test_ci_relationship_type';
		var gr1 = new GlideRecord(relTable);
		gr1.addQuery('parent_descriptor',parent); // Runs on
		gr1.addQuery('child_descriptor',child); // Runs
		gr1.addQuery('name',name); // Runs on::Runs
		gr1.query();
		if (!gr1.next()) {		
			// Does not exist
			var gr2 = new GlideRecord(relTable);
			gr1.initialize();
			gr1.setValue('parent_descriptor',parent); // Runs on
			gr1.setValue('child_descriptor',child); // Runs
			rtnSysID = gr1.insert();	
		}
		else {
			rtnSysID = gr1.getValue('sys_id').toString();
		}
		return rtnSysID;
	},

    type: 'UpdateOfTestRels'
};

/* Example calling

new x_tekso_twxapp01.UpdateOfTestRels().restoreAllCMDBRelationRecordsSilently();

new x_tekso_twxapp01.UpdateOfTestRels().updateCMDBRelationRecords(1);

or

var si = new x_tekso_twxapp01.UpdateOfTestRels();
si.restoreAllCMDBRelationRecordsSilently();
*/
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-04-15 10:55:06</sys_created_on>
        <sys_id>68956ab3dbc4d81041d08f3813961918</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>UpdateOfTestRels</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_68956ab3dbc4d81041d08f3813961918</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-04-15 10:58:00</sys_updated_on>
    </sys_script_include>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.OutboundREST</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>OutboundREST</name>
        <script><![CDATA[var OutboundREST = Class.create();
OutboundREST.prototype = {
    initialize: function() { 
    },
	// Add the user details to the x_tekso_twxapp01_connection_test record
	updateConnectionTestRecordUser: function(connection_sys_id,usrSysID) {
		if (usrSysID.length > 0) {
			var connectionTestTable = 'x_tekso_twxapp01_connection_test';
			var gr1 = new GlideRecord(connectionTestTable);
			gr1.addQuery('sys_id',connection_sys_id);
			gr1.query();
			if (gr1.next()) {			
				gr1.setValue('response_user_account_matched',true);
				gr1.setValue('response_user_account_sys_id',usrSysID);
				gr1.setValue('response_user_account_record',usrSysID);	
				gr1.setValue('updated_by_script','SI updateConnectionTestRecordUser'); // Debug	
				gr1.update();
			}
		}
	},
	// Update x_tekso_twxapp01_connection_test with the results of the connection test
	updateConnectionTestRecord: function(connSysID,successFail,restResponse,dtBack,statusCode,statusMsg,connection,usrAccount) {
		var rtnConnectionOK = false;
		if (connSysID.length > 0) {
			var connectionTestTable = 'x_tekso_twxapp01_connection_test';
			var gr1 = new GlideRecord(connectionTestTable);
			gr1.addQuery('sys_id',connSysID);
			gr1.query();
			if (gr1.next()) {			
				gr1.setValue('status','Processed');
				gr1.setValue('response_from_ucontrol',restResponse);
				gr1.setValue('total_length_of_response_from_ucontrol',restResponse.length);
				gr1.setValue('response_received_at',dtBack);
				gr1.setValue('response_status_code',statusCode);
				gr1.setValue('response_status_message',statusMsg);
				gr1.setValue('response_connection',connection);
				gr1.setValue('response_user_account',usrAccount);

				if (successFail == 'SUCCESS' && statusCode == 200 && connection == true) {
					gr1.setValue('connection_status','OK');
					rtnConnectionOK  = true;
				}
				else
				{
					gr1.setValue('connection_status','Failed');	
				}
				gr1.setValue('updated_by_script','SI updateConnectionTestRecord'); // Debug				
				gr1.update();
			}
		}
		return rtnConnectionOK;
	},
	// Check if user returned is valid and update x_tekso_twxapp01_setup
	handleTestResults2: function(setupSysID,connection_sys_id,resultUserAccount,startIfSuccess,testConnectionUsr,dtBack,classesArr) {
		
		var setupSysID2 = setupSysID.toString();
		var connection_sys_id2 = connection_sys_id.toString();
		var usr = '';
		var usrIsValid = false;
		var connOKAndGotUsr = false;
		var connStatus = 'Failed';
		var connStatusDtls = 'Failed';
		if (resultUserAccount.length > 0) {
			// Check if we can find a matching user record
			var usrSysID = this.checkForValidUserAccount(resultUserAccount);
			if (usrSysID.length > 0) {
				// Add the user details to the x_tekso_twxapp01_connection_test record
				this.updateConnectionTestRecordUser(connection_sys_id2,usrSysID);
				usr = usrSysID;
				usrIsValid = true;
				connOKAndGotUsr = true;
				// SUCCESS
				connStatus = 'OK';
				connStatusDtls = 'Connection Working';				
			}
			else {
				// No user account match found
				connStatus = 'Failed';
				connStatusDtls = 'No matching user account found for : ' + resultUserAccount;					
			}
		}
		else {
			// No user account provided
			connStatus = 'Failed';
			connStatusDtls = 'No user account returned';				
		}
		// Update x_tekso_twxapp01_setup with the results of the test connection
		this.updateSetupRecord(setupSysID2,connOKAndGotUsr,connStatus,connStatusDtls,dtBack,usr,usrIsValid,startIfSuccess,testConnectionUsr,classesArr);	
	},
	handleTestResults: function(rtnArr,setupSysID,connSysID,startIfSuccess,testConnectionUser) {
		var successFail = '';
		var statusCode = 0;
		var restResponse = '';
		var statusMsg = '';
		var connection = false;
		var userAccount = '';
		var classesArr = [];

		var setupSysID2 = setupSysID.toString();
		var connSysID2 = connSysID.toString();
		
		if (rtnArr.length > 2) {
			successFail= rtnArr[0];
			statusCode = parseInt(rtnArr[1]);
			restResponse = rtnArr[2];
			/*
			{
			"result": {
			"statusCode": 200,
			"statusMsg": "OK",
			"connection": true,
			"user_account": "ucontrol.integration",
			"classes": ["cmdb_ci_chassis_server", "cmdb_ci_cluster", "cmdb_ci_storage_cluster", "cmdb_ci_solaris_instance"]
						}
			}
			*/
			// Need to check if string contains 'result', 'statusCode', 'connection'
			if (restResponse.indexOf('result') >= 0 && 
				restResponse.indexOf('statusCode') && 
				restResponse.indexOf('connection')) {				
				var parser = new global.JSON();
				var jsonBack = parser.decode(restResponse);	
				statusCode = parseInt(jsonBack.result.statusCode);
				statusMsg = jsonBack.result.statusMsg;	
				connection = jsonBack.result.connection;
				userAccount = jsonBack.result.user_account;		

				classesArr = jsonBack.result.classes;		

			} // if got result / statusCode / connection
			else {
				statusMsg = restResponse;
			}
		} // if (rtnArr.length > 2) 
		
		var dtBack = new GlideDateTime();

		// Update x_tekso_twxapp01_connection_test with the results of the connection test		
		var connectionOK = this.updateConnectionTestRecord(connSysID2,successFail,restResponse,dtBack,statusCode,statusMsg,connection,userAccount);
		if (connectionOK == true) {
			// Check if user returned is valid and update x_tekso_twxapp01_setup
			this.handleTestResults2(setupSysID2,connSysID2,userAccount,startIfSuccess,testConnectionUser,dtBack,classesArr);
		}
		else {
			// Failed
			
			// Update x_tekso_twxapp01_setup with the results of the connection test
			this.updateSetupRecord(setupSysID,false,'Failed',statusMsg,dtBack,'',false,startIfSuccess,testConnectionUser,classesArr);			
		}
	},
	// Update x_tekso_twxapp01_setup with the results of the connection test
	// Called by processTestConnection -> handleTestResults and processTestConnection -> handleTestResults -> handleTestResults2
	updateSetupRecord: function(setupSysID,connOKAndGotUser,connStatus,connStatusDetails,dtBack,usr,usrIsValid,startIfSuccess,testUsr,classesArr) {

		var setupSysID2 = setupSysID.toString();
		
		var setupTable = 'x_tekso_twxapp01_setup';
		var setupExistingStatus = '';
		var setupExistingStatusDetails = '';
		var setupStatusWasSendingWhenConnectionFailed = false;
		var cmdbTracking = '';
		var gr2 = new GlideRecord(setupTable);
		gr2.addQuery('sys_id',setupSysID2);
		gr2.query();
		if (gr2.next()) {
			cmdbTracking = gr2.getValue('cmdb_tracking') || '';
			setupExistingStatus = gr2.getValue('status') || '';
			setupExistingStatusDetails = gr2.getValue('status_details') || '';
			setupStatusWasSendingWhenConnectionFailed = gr2.getValue('status_was_sending_when_connection_failed') || false;
			if (connOKAndGotUser == true) {
				// Update the classes - we should only do that if this is a success
				var osi = new UpdateSupportedClasses();
				osi.updateSupportedClassesTable(setupSysID2,classesArr);
			} 

			gr2.setValue('connection_status',connStatus);
			gr2.setValue('connection_status_details',connStatusDetails);
			gr2.setValue('connection_tested_at',dtBack);
			gr2.setValue('ucontrol_integration_user',usr);		
			gr2.setValue('ucontrol_integration_user_is_valid',usrIsValid);						
			gr2.setValue('start_sending_requested',false); //
			gr2.setValue('connection_test_requested',false); //
			gr2.setValue('connection_test_link',''); //
			// Was Sending has now Failed connection
			if (connStatus == 'Failed') {
				if (setupExistingStatus == 'Sending') {
					// Status = Error
					// Status Error Details = Connection Lost At
					// Was Sending Connection Failed At
					gr2.setValue('status','Error'); //
					gr2.setValue('status_was_sending_when_connection_failed',true);
					gr2.setValue('status_was_sending_when_connection_failed_at',dtBack);
					gr2.setValue('status_error_details','Connection failed at ' + dtBack);
				}
			} // if (setupConnectionStatus == 'Failed') 

			if (connStatus == 'OK') {
				if (startIfSuccess == true && setupExistingStatus != 'Sending') {
					// Set status to Sending
					gr2.setValue('status','Sending'); 
					gr2.setValue('help','uControl URL, uControl MID Server, uControl Polling Interval (minutes), Max Retries and uControl Connection Timeout (minutes) can only be updated when Sending is Stopped'); 
					gr2.setValue('status_was_sending_when_connection_failed',false);
					gr2.setValue('status_was_sending_when_connection_failed_at','');					
					if (cmdbTracking == 'Off') {
						// The onLoad client script to display a pop-up when the 
						// form reloads
						var popupmsg = 'x_tekso_twxapp01_start_sending_message';
						gr2.setValue('show_message_on_form_reload',popupmsg);		
					}
					if (setupExistingStatus == 'Error') {
						// If the previous status was Error then clear the error details
						gr2.setValue('status_error_details',''); 						
					}
					else {
						// Record when and who set the status to Sending - but only do this if the previous
						// status was not an Error. If we are recovering from an Error then we should retain the earlier 
						// values
						
						// testConnectionUser is the sys_created_by from x_tekso_twxapp01_connection_test
						// i.e this is the user who requested the test/start
						gr2.setValue('status_details','Started at ' + dtBack + ' by: ' + testUsr);	
						gr2.setValue('status_set_to_sending_by',testUsr);
						gr2.setValue('status_set_to_sending_at',dtBack);
					} //if (setupExistingStatus == 'Error')					
				} //if (startIfSuccess == true && setupExistingStatus != 'Sending') {
				// 
				// "Not Sending"

				else {
					// Connection OK but do not start
					if (setupExistingStatus == 'Not Sending') {
						if (setupExistingStatusDetails == 'Connection Requires Testing') {
							gr2.setValue('status_details',setupExistingStatus);	
						}
					}
					if (setupExistingStatus == 'Error' && setupStatusWasSendingWhenConnectionFailed == true) {
						//Restart the status - back to Sending
						gr2.setValue('status','Sending'); //
						gr2.setValue('help','uControl URL, uControl MID Server, uControl Polling Interval (minutes), Max Retries and uControl Connection Timeout (minutes) can only be updated when Sending is Stopped'); //
						gr2.setValue('status_was_sending_when_connection_failed',false);
						gr2.setValue('status_was_sending_when_connection_failed_at','');						
					}
				}
			} // if (setupConnectionStatus == 'OK') 

			// CMDB Tracking is Running but we have lost the user
			if (usrIsValid == false && cmdbTracking == 'Running') {
				gr2.setValue('cmdb_tracking','Error'); //
				gr2.setValue('cmdb_tracking_error_details','Stopped - No uControl Integration User');	//
			}

			// Now got a valid user set status back to Running
			if (usrIsValid == true && cmdbTracking == 'Error') {
				gr2.setValue('cmdb_tracking','Running'); //
				gr2.setValue('cmdb_tracking_error_details',''); //
			}

			gr2.setValue('updated_by_script','SI updateSetupRecord'); // Debug	
			gr2.update();	
		} // if (gr2.next())			
	},
	checkForValidUserAccount: function(resultUserAccount){
		var rtnSysID = '';
		if (resultUserAccount.length > 0){
			var gr1 = new GlideRecord('sys_user');
			gr1.addQuery('user_name',resultUserAccount);
			gr1.query();
			if (gr1.next()) {
				// Found a matching user account
				// Success	
				rtnSysID = gr1.getValue('sys_id') || '';
			}
		}	
		return rtnSysID;
	},
	checkForAbortedOrTimedOut: function(connectionSysID){
		var abort = false;
		var connectionTestTable = 'x_tekso_twxapp01_connection_test';
		var gr1 = new GlideRecord(connectionTestTable);
		gr1.addQuery('sys_id',connectionSysID);
		gr1.query();
		if (gr1.next()) {
			var status = gr1.getValue('status') || '';
			var timedOutStatus =  gr1.getValue('timed_out') || false;
			var abortedStatus =  gr1.getValue('aborted') || false;				
			if (status == 'Aborted') {
				abort = true;
			}
			if (status == 'Timed Out') {
				abort = true;
			}
			if (timedOutStatus == true) {
				abort = true;
			}
			if (abortedStatus == true) {
				abort = true;
			}						
		}	
		return abort;
	},	
	// Not currently used
	sendRESTRequest: function(midServerName,httpMethod,endPoint) {
		// Returns an array 
		// [0] = SUCCESS \ FAIL
		// [1] = REST Status Number
		// [2] = REST Response
		
		var responseBody = '';
		var status = 500;
		var sm;
		var rtnArr = [];
		
		try{
			sm = new sn_ws.RESTMessageV2();

			sm.setMIDServer(midServerName); // e.g. 'steveserver03409'
			sm.setRequestHeader('Content-Type','application/json');
			sm.setRequestHeader('Accept','application/json');
			sm.setHttpMethod(httpMethod); // e.g. get / post				
			sm.setEndpoint(endPoint); // e.g. 'https://tekucontroldemo3.tekwurx.com/uControl/rest/servicenow/connect'
	
			response = sm.executeAsync(); 
	
			responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
			// {"result":{"statusCode":200,"statusMsg":"OK","connection":true}}
			status = response.getStatusCode();
			// 200
		} catch(ex) {
			responseBody = ex.getMessage();
			status = '500';
		} finally {
			requestBody = sm ? sm.getRequestBody():null;
		}
		
		if (parseInt(status) == 200) {
			// Success for GET
			rtnArr.push('SUCCESS');
			rtnArr.push(parseInt(status));
			rtnArr.push(responseBody); //{"result":{"statusCode":200,"statusMsg":"OK","connection":true}}
			return rtnArr;
		}
		else {
			rtnArr.push('FAIL');				
			rtnArr.push(parseInt(status));			
			rtnArr.push(responseBody);  
			return rtnArr;
			// Bad MID Server:
			// 500
			// No response for ECC message request with sysid=00bd017a1b6ec450f953ff72cd4bcbfc after waiting for 30 seconds in ECC Queue

			// Bad url:
			// 500
			// java.lang.IllegalStateException: unsupported protocol: 'xhttps'

			// Good URL but bad endpoint e.g connecta
			// 404
			// Method failed: (/uControl/rest/servicenow/connecta) with code: 404

			// Good URL but bad method e.g. geta
			// 500
			// No enum constant com.glide.rest.outbound.HTTPOutboundMethod.geta

			// No URL
			// 0
			// The request failed: java.lang.IllegalArgumentException: host parameter is null

			// No MID Server
			// 0
			// Unknown host
		}	
	},	
	sendRESTRequestWithBody: function(midServerName,httpMethod,endPoint,requestBody,successCode) {
		// Returns an array 
		// [0] = SUCCESS \ FAIL
		// [1] = REST Status Number e.g. 200
		// [2] = REST Response e.g. {"result":{"statusCode":200,"statusMsg":"OK"}}
		
		var responseBody = '';
		var status = 500;
		var sm;
		var rtnArr = [];
		
		try{
			sm = new sn_ws.RESTMessageV2();

			sm.setMIDServer(midServerName); // e.g. 'steveserver03409'
			sm.setRequestHeader('Content-Type','application/json');
			sm.setRequestHeader('Accept','application/json');
			sm.setHttpMethod(httpMethod); // e.g. get / post		
			sm.setRequestBody(requestBody);
			sm.setEndpoint(endPoint); // e.g. 'https://tekucontroldemo3.tekwurx.com/uControl/rest/servicenow/connect'
	
			//When you don't care about the response it is better to use executeAsync (fire and forget)
			//When your request is very large or has the potential to take a long time it is better to use executeAsync. 
			//From there, if you need the response then you can set up a sensor business rule to listen to the ecc_queue 
			//and listen for the response.
			response = sm.executeAsync(); 			
			//sm.executeAsync(); //RMD
			
			//response.getBody Get the content of the REST response body.
			responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
			/*
			{
			"result": {
			"statusCode": 200,
			"statusMsg": "OK",
			"connection": true,
			"user_account": "ucontrol.integration",
			"classes": ["cmdb_ci_chassis_server", "cmdb_ci_cluster", "cmdb_ci_storage_cluster", "cmdb_ci_solaris_instance"]
						}
			}
			
			or
			
			{"result":{"statusCode":200,"statusMsg":"OK"}}
			
			*/
						
			//The numeric status code returned by the REST provider, such as 200 for a successful response.
			status = response.getStatusCode();
			//status = '200';//RMD
			//responseBody = '{"result":{"statusCode":200,"statusMsg":"OK","connection":true}}'; //RMD			
		} catch(ex) {
			responseBody = ex.getMessage();
			status = '500';
		} finally {
			requestBody = sm ? sm.getRequestBody():null;
		}
		
		if (parseInt(status) == successCode) {
			// 200 = Success for GET
			rtnArr.push('SUCCESS');
			rtnArr.push(parseInt(status));
			rtnArr.push(responseBody); //{"result":{"statusCode":200,"statusMsg":"OK","connection":true}}
			return rtnArr;
		}
		else {
			rtnArr.push('FAIL');				
			rtnArr.push(parseInt(status));			
			rtnArr.push(responseBody);  
			return rtnArr;
			// Bad MID Server:
			// 500
			// No response for ECC message request with sysid=00bd017a1b6ec450f953ff72cd4bcbfc after waiting for 30 seconds in ECC Queue

			// Bad url:
			// 500
			// java.lang.IllegalStateException: unsupported protocol: 'xhttps'

			// Good URL but bad endpoint e.g connecta
			// 404
			// Method failed: (/uControl/rest/servicenow/connecta) with code: 404

			// Good URL but bad method e.g. geta
			// 500
			// No enum constant com.glide.rest.outbound.HTTPOutboundMethod.geta

			// No URL
			// 0
			// The request failed: java.lang.IllegalArgumentException: host parameter is null

			// No MID Server
			// 0
			// Unknown host
		}	
	},
	
	sendRESTRequestWithBodyNoWait: function(midServerName,httpMethod,endPoint,requestBody,successCode) {
		// Same as sendRESTRequestWithBody but does not wait for a response
		// does sm.executeAsync(); 
		// instead of response = sm.executeAsync(); 
		// Need to check the ecc_queue for the response - this is done via a business rule
		var sm;		
		try{
			sm = new sn_ws.RESTMessageV2();

			sm.setMIDServer(midServerName); // e.g. 'steveserver03409'
			sm.setRequestHeader('Content-Type','application/json');
			sm.setRequestHeader('Accept','application/json');
			sm.setHttpMethod(httpMethod); // e.g. get / post		
			sm.setRequestBody(requestBody);
			sm.setEndpoint(endPoint); // e.g. 'https://tekucontroldemo3.tekwurx.com/uControl/rest/servicenow/connect'
	
			//When you don't care about the response it is better to use executeAsync (fire and forget)
			//When your request is very large or has the potential to take a long time it is better to use executeAsync. 
			//From there, if you need the response then you can set up a sensor business rule to listen to the ecc_queue 
			//and listen for the response.
			sm.executeAsync(); 				
		} catch(ex) {
			var a = 1; //Fake statement - do nothing
		} finally {
			var b = 2; //Fake statement - do nothing
		}	
	},
	
	updateCI: function(midServerName,url,requestBody) {
		// Returns an array 
		// [0] = SUCCESS \ FAIL
		// [1] = REST Status Number e.g. 200
		// [2] = REST Response e.g. {"result":{"statusCode":200,"statusMsg":"OK"}}
		
		var rtnArr = [];
		
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/update/ci';

				// 200 = Success for update
				rtnArr = this.sendRESTRequestWithBody(midServerName,httpMethod,endPoint,requestBody,200);
			}
			else {
				// No URL
				rtnArr.push('FAIL');				
				rtnArr.push(500);
				rtnArr.push('No url');				
			}
		}
		else {
			// No midServer
			rtnArr.push('FAIL');				
			rtnArr.push(500);
			rtnArr.push('No mid server');
		}
		
		return rtnArr;		
	},
	updateCINoWait: function(midServerName,url,requestBody) {
		// Same as updateCI but does not wait for a response or return a result
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/update/ci';

				// 200 = Success for update
				this.sendRESTRequestWithBodyNoWait(midServerName,httpMethod,endPoint,requestBody,200);
			}
		}
	},	
	deleteCI: function(midServerName,url,requestBody) {
		// Returns an array 
		// [0] = SUCCESS \ FAIL
		// [1] = REST Status Number e.g. 200
		// [2] = REST Response	e.g. {"result":{"statusCode":200,"statusMsg":"OK"}}
		
		var rtnArr = [];
		
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/delete/ci';

				// 200 = Success for delete
				rtnArr = this.sendRESTRequestWithBody(midServerName,httpMethod,endPoint,requestBody,200);
			}
			else {
				// No URL
				rtnArr.push('FAIL');				
				rtnArr.push(500);
				rtnArr.push('No url');				
			}
		}
		else {
			// No midServer
			rtnArr.push('FAIL');				
			rtnArr.push(500);
			rtnArr.push('No mid server');
		}
		
		return rtnArr;		
	},	
	deleteCINoWait: function(midServerName,url,requestBody) {
		// Same as deleteCI but does not wait for a response or return a result		
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/delete/ci';

				// 200 = Success for delete
				this.sendRESTRequestWithBodyNoWait(midServerName,httpMethod,endPoint,requestBody,200);
			}
		}		
	},		
	createCI: function(midServerName,url,requestBody) {
		// Returns an array 
		// [0] = SUCCESS \ FAIL
		// [1] = REST Status Number e.g. 200
		// [2] = REST Response e.g. {"result":{"statusCode":200,"statusMsg":"OK"}}	
		
		var rtnArr = [];
		
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/create/ci';

				// 201 = Success for create
				rtnArr = this.sendRESTRequestWithBody(midServerName,httpMethod,endPoint,requestBody,201);
			}
			else {
				// No URL
				rtnArr.push('FAIL');				
				rtnArr.push(500);
				rtnArr.push('No url');				
			}
		}
		else {
			// No midServer
			rtnArr.push('FAIL');				
			rtnArr.push(500);
			rtnArr.push('No mid server');
		}
		
		return rtnArr;		
	},		
	createCINoWait: function(midServerName,url,requestBody) {
		// Same as createCI but does not wait for a response or return a result	
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/create/ci';

				// 201 = Success for create
				this.sendRESTRequestWithBodyNoWait(midServerName,httpMethod,endPoint,requestBody,201);
			}
		}	
	},	
	testConnection: function(midServerName,url,requestBody) {
		// Returns an array 
		// [0] = SUCCESS \ FAIL
		// [1] = REST Status Number
		// [2] = REST Response:
		/*
		{
		"result": {
		"statusCode": 200,
		"statusMsg": "OK",
		"connection": true,
		"user_account": "ucontrol.integration",
		"classes": ["cmdb_ci_chassis_server", "cmdb_ci_cluster", "cmdb_ci_storage_cluster", "cmdb_ci_solaris_instance"]
					}
		}
		*/
		var rtnArr = [];
				
		if (midServerName.length > 0) {
			if (url.length > 0) {
				var httpMethod = 'post';
				var endPoint = url + '/uControl/rest/servicenow/connect';

				rtnArr = this.sendRESTRequestWithBody(midServerName,httpMethod,endPoint,requestBody,200);
			}
			else {
				// No URL
				rtnArr.push('FAIL');				
				rtnArr.push(500);
				rtnArr.push('No url');				
			}
		}
		else {
			// No midServer
			rtnArr.push('FAIL');				
			rtnArr.push(500);
			rtnArr.push('No mid server');
		}
		return rtnArr;
	},			
	processTestConnection: function (connection_sys_id) {
		
		var connection_sys_id2 = connection_sys_id.toString();
		
		var connectionOK = false;
		var connectionOKAndGotUser = false;

		// User who intiated the test connection
		var testConnectionUser = '';	
		
		var setupConnectionStatus = '';
		var setupConnectionStatusDetails = '';
		var setupuControlIntegrationUser = '';
		var setupuControlIntegrationUserIsValid = false;
		
		var connectionTestTable = 'x_tekso_twxapp01_connection_test';
		var gr1 = new GlideRecord(connectionTestTable);
		gr1.addQuery('sys_id',connection_sys_id);
		gr1.query();
		if (gr1.next()) {
			var setupSysID = gr1.getValue('setup_record') || '';
			var setupSysID2 = setupSysID.toString();
			
			// sys_created_by for record x_tekso_twxapp01_connection_test
			// will be the user who requested the test
			testConnectionUser = gr1.getValue('sys_created_by') || '';
			
			var jsonRequestBody = gr1.getValue('json_request_body') || '';
			var midServerName = gr1.getValue('ucontrol_mid_server_name') || '';
			
			// If this is true then if the test connection is successful the status should be set to Sending
			var startIfSuccess = gr1.getValue('start_sending_requested') || false;	
			var url = gr1.getValue('ucontrol_url') || '';
		
			var dtSent = new GlideDateTime();
			var rtnArr = [];
			
			// Remove any leading or trailing spaces from the URL
			url = url.replace(/^\s+|\s+$/g, '');

			if (url.length > 0) {
				// Remove the last character if it is a /
				if (url.charAt(url.length - 1) == '/') {
					url = url.substr(0, url.length - 1);
				}
			}	
			
			gr1.setValue('status','Sent');
			gr1.setValue('sent_to_ucontrol_at',dtSent);
			gr1.setValue('updated_by_script','SI processTestConnection'); // Debug				
			gr1.update();
			
			rtnArr = this.testConnection(midServerName,url,jsonRequestBody);

			var abort = this.checkForAbortedOrTimedOut(connection_sys_id2);
			if (abort == false) {
				this.handleTestResults(rtnArr,setupSysID2,connection_sys_id2,startIfSuccess,testConnectionUser);
			}
			
			/* Not used
			if (abort == false) {
				var resultSuccessFail = '';
			} 
			*/
		} // if (gr1.next()) 
	},
	process: function (data_sys_id){
		var trackingTable = 'x_tekso_twxapp01_cmdb_changes';
		var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';
		var linkTable = 'x_tekso_twxapp01_cmdb_link_to_rest_data';
		
		var gr1 = new GlideRecord(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
		gr1.addQuery('sys_id',data_sys_id);
		gr1.query();
		if (gr1.next()) {
			var jsonRequestBody = gr1.getValue('json_request_body');
			var midServerName = gr1.getValue('ucontrol_mid_server_name');
			var url = gr1.getValue('ucontrol_url');
			var operation = gr1.getValue('operation');
			var dtSent = new GlideDateTime();
			var rtnArr = [];
			
			// Remove any leading or trailing spaces from the URL
			url = url.replace(/^\s+|\s+$/g, '');

			if (url.length > 0) {
				// Remove the last character if it is a /
				if (url.charAt(url.length - 1) == '/') {
					url = url.substr(0, url.length - 1);
				}
			}

			gr1.setValue('sent_to_ucontrol_at',dtSent); //x_tekso_twxapp01_rest_data_to_ucontrol
			gr1.setValue('updated_by_script','SI process'); // Debug
			gr1.update();

			var gr2 = new GlideRecord(linkTable); //x_tekso_twxapp01_cmdb_link_to_rest_data
			gr2.addQuery('link_to_rest_data_record',data_sys_id);
			gr2.query();
			while(gr2.next()) {
				gr2.setValue('sent_to_ucontrol_at',dtSent);
				gr2.setValue('updated_by_script','SI process'); // Debug						
				gr2.update(); //x_tekso_twxapp01_cmdb_link_to_rest_data			
				
				var link_sys_id = gr2.sys_id;
				var cmdb_changes_sys_id = gr2.getValue('link_to_processing_record');
				// Get the change record
				var gr3 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
				gr3.addQuery('sys_id',cmdb_changes_sys_id);
				gr3.query();
				while(gr3.next()) {
					// Update the REST response on the change record
					// There should only be 1 record
					gr3.setValue('status','Sent'); // If success?????????????????????????????????
					gr3.setValue('sent_to_ucontrol_at',dtSent); 
					var no_of_times_sent_to_ucontrol = gr3.getValue('no_of_times_sent_to_ucontrol') || 0;
					no_of_times_sent_to_ucontrol++;
					gr3.setValue('no_of_times_sent_to_ucontrol',no_of_times_sent_to_ucontrol);	
					gr3.setValue('link_to_latest_rest_data_record',data_sys_id);
					gr3.setValue('rest_data_record_created',true);
					gr3.setValue('link_to_latest_rest_response_record',link_sys_id);
					gr3.update();
				} //while(gr3.next())	
			} //while(gr2.next())
			
			if (operation == 'update') {
				rtnArr = this.updateCI(midServerName,url,jsonRequestBody);	
			}
			
			if (operation == 'delete') {
				rtnArr = this.deleteCI(midServerName,url,jsonRequestBody);	
			}		
			
			if (operation == 'insert') {
				rtnArr = this.createCI(midServerName,url,jsonRequestBody);	
			}	

			//var resultStatusCode = 0;
			var resultRestResponse = '';
			//var resultStatusMsg = '';
			
			// Handle the result
			if (rtnArr.length > 2) {
				//resultStatusCode = parseInt(rtnArr[1]); // e.g. 200
				resultRestResponse = rtnArr[2]; // e.g. {"result":{"statusCode":200,"statusMsg":"OK"}}
			}
				
			var si = new x_tekso_twxapp01.HandleRESTResponse();
			si.handleRESTResponse(resultRestResponse,data_sys_id);
			
			/*
			var dtBack = new GlideDateTime();
			
			gr1.setValue('response_from_ucontrol',resultRestResponse); // rtnArr[2]
			gr1.setValue('total_length_of_response_from_ucontrol',resultRestResponse.length);
			gr1.setValue('response_received_at',dtBack);
			gr1.setValue('response_received',true);
			gr1.setValue('response_status_code',resultStatusCode);
			gr1.setValue('response_status_message',resultStatusMsg);
			gr1.setValue('updated_by_script','SI process'); // Debug					
			gr1.update(); //x_tekso_twxapp01_rest_data_to_ucontrol

			// Get all the link records that have this data_sys_id
			var gr2 = new GlideRecord(linkTable); //x_tekso_twxapp01_cmdb_link_to_rest_data
			gr2.addQuery('link_to_rest_data_record',data_sys_id);
			gr2.query();
			while(gr2.next()) {
				// For each one - loop through and get each change record
				var link_sys_id = gr2.sys_id;
				var cmdb_changes_sys_id = gr2.getValue('link_to_processing_record');
				// Update the REST response on the link record
				gr2.setValue('sent_to_ucontrol_at',dtSent);
				gr2.setValue('response_from_ucontrol',resultRestResponse); // rtnArr[2]
				gr2.setValue('total_length_of_response_from_ucontrol',resultRestResponse.length);
				gr2.setValue('response_received_at',dtBack);
				gr2.setValue('response_received',true);
				gr2.setValue('response_status_code',resultStatusCode);
				gr2.setValue('response_status_message',resultStatusMsg);
				gr2.setValue('updated_by_script','SI process'); // Debug						
				gr2.update(); //x_tekso_twxapp01_cmdb_link_to_rest_data

				// Get the change record
				var gr3 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
				gr3.addQuery('sys_id',cmdb_changes_sys_id);
				gr3.query();
				while(gr3.next()) {
					// Update the REST response on the change record
					// There should only be 1 record
					gr3.setValue('status','Sent'); // If success?????????????????????????????????
					gr3.setValue('sent_to_ucontrol_at',dtSent); 
					gr3.setValue('response_from_ucontrol',resultRestResponse); // rtnArr[2]
					gr3.setValue('total_length_of_response_from_ucontrol',resultRestResponse.length);
					gr3.setValue('response_received_at',dtBack);	
					gr3.setValue('response_received',true);
					gr3.setValue('response_status_code',resultStatusCode);
					gr3.setValue('response_status_message',resultStatusMsg);
					var no_of_times_sent_to_ucontrol = gr3.getValue('no_of_times_sent_to_ucontrol') || 0;
					no_of_times_sent_to_ucontrol++;
					gr3.setValue('no_of_times_sent_to_ucontrol',no_of_times_sent_to_ucontrol);	
					gr3.setValue('link_to_latest_rest_data_record',data_sys_id);
					gr3.setValue('rest_data_record_created',true);
					gr3.setValue('link_to_latest_rest_response_record',link_sys_id);
					gr3.setValue('rest_response_record_created',true);
					gr3.setValue('updated_by_script','SI process'); // Debug	
					gr3.update(); //x_tekso_twxapp01_cmdb_changes
				} // while(gr3.next())
			} //while(gr2.next())	
			*/
		}	
	},
	processNoWait: function (data_sys_id){
		//Same as process but does not wait for a response or return a result	
		var trackingTable = 'x_tekso_twxapp01_cmdb_changes';
		var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';
		var linkTable = 'x_tekso_twxapp01_cmdb_link_to_rest_data';
		
		var gr1 = new GlideRecord(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
		gr1.addQuery('sys_id',data_sys_id);
		gr1.query();
		if (gr1.next()) {
			var jsonRequestBody = gr1.getValue('json_request_body');
			var midServerName = gr1.getValue('ucontrol_mid_server_name');
			var url = gr1.getValue('ucontrol_url');
			var operation = gr1.getValue('operation');
			var dtSent = new GlideDateTime();
			var rtnArr = [];
			
			// Remove any leading or trailing spaces from the URL
			url = url.replace(/^\s+|\s+$/g, '');

			if (url.length > 0) {
				// Remove the last character if it is a /
				if (url.charAt(url.length - 1) == '/') {
					url = url.substr(0, url.length - 1);
				}
			}

			gr1.setValue('sent_to_ucontrol_at',dtSent); //x_tekso_twxapp01_rest_data_to_ucontrol
			gr1.setValue('updated_by_script','SI process'); // Debug	
			gr1.update();

			var gr2 = new GlideRecord(linkTable); //x_tekso_twxapp01_cmdb_link_to_rest_data
			gr2.addQuery('link_to_rest_data_record',data_sys_id);
			gr2.query();
			while(gr2.next()) {
				gr2.setValue('sent_to_ucontrol_at',dtSent);
				gr2.setValue('updated_by_script','SI process'); // Debug						
				gr2.update(); //x_tekso_twxapp01_cmdb_link_to_rest_data			
				
				var link_sys_id = gr2.sys_id;
				var cmdb_changes_sys_id = gr2.getValue('link_to_processing_record');
				// Get the change record
				var gr3 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
				gr3.addQuery('sys_id',cmdb_changes_sys_id);
				gr3.query();
				while(gr3.next()) {
					// Update the REST response on the change record
					// There should only be 1 record
					gr3.setValue('status','Sent'); // If success?????????????????????????????????
					gr3.setValue('sent_to_ucontrol_at',dtSent); 
					var no_of_times_sent_to_ucontrol = gr3.getValue('no_of_times_sent_to_ucontrol') || 0;
					no_of_times_sent_to_ucontrol++;
					gr3.setValue('no_of_times_sent_to_ucontrol',no_of_times_sent_to_ucontrol);	
					gr3.setValue('link_to_latest_rest_data_record',data_sys_id);
					gr3.setValue('rest_data_record_created',true);
					gr3.setValue('link_to_latest_rest_response_record',link_sys_id);
					gr3.update();
				} //while(gr3.next())	
			} //while(gr2.next())
			
			if (operation == 'update') {
				this.updateCINoWait(midServerName,url,jsonRequestBody);	
			}
			
			if (operation == 'delete') {
				this.deleteCINoWait(midServerName,url,jsonRequestBody);	
			}		
			
			if (operation == 'insert') {
				this.createCINoWait(midServerName,url,jsonRequestBody);	
			}	
		}	
	},	
	writeDebugLog: function(msg) {
	var debugTable = 'x_tekso_twxapp01_debug_log';
	var gr1 = new GlideRecord(debugTable);
	gr1.initialize();
	gr1.setValue('message',msg);
	gr1.insert();
	},
    type: 'OutboundREST'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-01-28 12:16:56</sys_created_on>
        <sys_id>fc76493edba2085035a38a72399619c7</sys_id>
        <sys_mod_count>215</sys_mod_count>
        <sys_name>OutboundREST</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_fc76493edba2085035a38a72399619c7</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-04-20 20:37:47</sys_updated_on>
    </sys_script_include>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.DebugTrackDataChanges</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DebugTrackDataChanges</name>
        <script><![CDATA[// Example Calling new x_tekso_twxapp01.DebugTrackDataChanges().trackChanges(current,previous);

/* Example calling
var si = new x_tekso_twxapp01.DebugTrackDataChanges();
si.trackChanges(current,previous);
*/

var DebugTrackDataChanges = Class.create();
DebugTrackDataChanges.prototype = {
    initialize: function() {
    },

	// Check if this combination of data has been inserted recently
	checkIfAlreadyInserted: function(action2,tblName2,i,ilbl,itp,isz,inewvalstr,iref,inewln) {
		
		var rtn = false;
		var debugTable = 'x_tekso_twxapp01_debug_track_data_changes';
	
		var gr1 = new GlideRecord(debugTable);
		// Find records created in last 15 minutes
		gr1.addQuery('sys_created_on','>=', gs.minutesAgo(15));		
		gr1.addQuery('action',action2); // Action
		gr1.addQuery('table_name',tblName2); // Table
		gr1.addQuery('column_name',i); // Column Name
		gr1.addQuery('column_label',ilbl); // Column Label
		gr1.addQuery('data_type',itp); // Data Type
		gr1.addQuery('field_size',isz);	// Field Size
		if (itp == 'string' || itp == 'reference' || itp == 'integer' || itp == 'boolean') {
			gr1.addQuery('new_value',inewvalstr); // Value
		}

		if (itp == 'reference') {
			gr1.addQuery('reference_to_table',iref); //Reference sys_id
		}

		if (itp == 'string' || itp == 'reference' || itp == 'integer') {
			gr1.addQuery('new_value_length',inewln); //Value length												
		}
				
		gr1.query();
		if (gr1.next()) {
			rtn = true;
		}
		return rtn;
	},
	
	//takes in current and previous objects from BR but rename to brCurrent and brPrevious
	//to avoid confusions
	trackChanges: function(brCurrent, brPrevious) {

		// The same identical code is used in all the Debug BR's
		var debugTable = 'x_tekso_twxapp01_debug_track_data_changes';

		var tblName = brCurrent.getTableName();	
		var tblName2 = tblName.toString();

		var action = brCurrent.operation(); // insert or update or delete		
		var action2 = action.toString();

		var excludedArr = [];
		excludedArr.push('sys_id');
		excludedArr.push('sys_created_on');
		excludedArr.push('sys_created_by');
		excludedArr.push('sys_updated_on');
		excludedArr.push('sys_updated_by');
		excludedArr.push('sys_mod_count');
		//excludedArr.push('sys_meta'); //causes getED() to crash
		excludedArr.push('updated_by_script');
		excludedArr.push('inserted_by_script');	

		//insert --------------------------------------------------------------
		if (action2 == 'insert') {

			// There will be no previous values for an insert
			for (var i in brCurrent){
				//By default 'in' iterates over inherited properties as well
				//Be aware that members that are added to the prototype of the object will be included in the enumeration. 
				//It is wise to program defensively by using the hasOwnProperty method to distinguish the true members of the object:
				//hasOwnProperty returns a boolean value indicating whether the object on which you are calling it has a 
				//property with the name of the argument.
				//Using hasOwnPropery(property) filters-out these unnecessary looping through meta-informations
				if (brCurrent.hasOwnProperty(i)) {				
					if (excludedArr.indexOf(i) == -1) {
						// put in a try / catch block as some fields e.g. sys_meta cause a problem
						try {
							var ielement = brCurrent.getElement(i);					
							var idescriptor = ielement.getED();					
							var isz = idescriptor.getLength();					
							var ilbl = idescriptor.getLabel();					
							var itp = idescriptor.getInternalType();					
							var iisChoice = idescriptor.isChoiceTable();	
							var inewval = brCurrent.getElement(i);			
							var inewvalstr = '';				
							var inewln = 0;
							var iref = '';

							if (itp == 'reference') {
								iref = idescriptor.getReference();			  
							}
							if (itp == 'string' || itp == 'reference' || itp == 'integer') {
								inewvalstr = inewval.toString();
								inewln = inewvalstr.length;
							}

							if (itp == 'boolean') {
								if (inewval == true) {
									inewvalstr = 'true';
								}
								else {
									inewvalstr = 'false';
								}
							} //if (itp == 'boolean') {

							// Check if this combination of data has been inserted recently
							// We don't want to keep writing the same stuff to the table all the time
							if (this.checkIfAlreadyInserted(action2,tblName2,i,ilbl,itp,isz,inewvalstr,iref,inewln) == false) {	
								var gr1 = new GlideRecord(debugTable);
								gr1.initialize();
								gr1.setValue('action',action2);
								gr1.setValue('table_name',tblName2);
								gr1.setValue('column_name',i);
								gr1.setValue('column_label',ilbl);
								gr1.setValue('data_type',itp);
								gr1.setValue('field_size',isz);
								gr1.setValue('choice',iisChoice);
								gr1.setValue('inserted_by_script',brCurrent.inserted_by_script);					
								if (itp == 'string' || itp == 'reference' || itp == 'integer') {
									gr1.setValue('new_value_length',inewln);							
									gr1.setValue('new_value',inewvalstr);							
								}
								if (itp == 'boolean') {
									gr1.setValue('new_value',inewvalstr);					
								}
								if (itp == 'reference') {
									gr1.setValue('reference_to_table',iref);
								}
								gr1.insert();
							}
						} // try
						catch(error) {
							//Do nothing
							var a = 1;
						}
					} // if (excludedArr.indexOf(i) == -1) {
				} // if (brCurrent.hasOwnProperty(i)) {
			} // for (var i in brCurrent){					
		} //if (action2 == 'insert') {

		//update --------------------------------------------------------------	
		if (action2 == 'update') {		
			for (var u in brCurrent){

				//By default 'in' iterates over inherited properties as well
				//Be aware that members that are added to the prototype of the object will be included in the enumeration. 
				//It is wise to program defensively by using the hasOwnProperty method to distinguish the true members of the object:
				//hasOwnProperty returns a boolean value indicating whether the object on which you are calling it has a 
				//property with the name of the argument.
				//Using hasOwnPropery(property) filters-out these unnecessary looping through meta-informations
				if (brCurrent.hasOwnProperty(u)) {

					if (excludedArr.indexOf(u) == -1) {
						if (brCurrent[u] != brPrevious[u]) {	

							// put in a try / catch block as some fields e.g. sys_meta cause a problem
							try {
								var uelement = brCurrent.getElement(u);
								var udescriptor = uelement.getED();
								var usz = udescriptor.getLength();
								var ulbl = udescriptor.getLabel();
								var utp = udescriptor.getInternalType();
								var uisChoice = udescriptor.isChoiceTable();
								var uoldval = brPrevious.getElement(u) || '';
								var uoldvalstr = '';
								var uoldln = 0;
								var unewval = brCurrent.getElement(u) || '';				
								var unewvalstr = '';				
								var unewln = 0;

								var uref = '';
								if (utp == 'reference') {
									uref = udescriptor.getReference();			  
								}

								if (utp == 'string' || utp == 'reference' || utp == 'integer') {
									uoldvalstr = uoldval.toString();
									unewvalstr = unewval.toString();
									uoldln = uoldvalstr.length;
									unewln = unewvalstr.length;
								}

								if (utp == 'boolean') {
									if (uoldval == true) {
										uoldvalstr = 'true';
									}
									else {
										uoldvalstr = 'false';
									}

									if (unewval == true) {
										unewvalstr = 'true';
									}
									else {
										unewvalstr = 'false';
									}
								} //if (utp == 'boolean') {

								// Check if this combination of data has been inserted recently
								// We don't want to keep writing the same stuff to the table all the time
								if (this.checkIfAlreadyInserted(action2,tblName2,u,ulbl,utp,usz,unewvalstr,uref,unewln) == false) {	
									var gr2 = new GlideRecord(debugTable);
									gr2.initialize();
									gr2.setValue('action',action2);
									gr2.setValue('table_name',tblName2);
									gr2.setValue('column_name',u);
									gr2.setValue('column_label',ulbl);
									gr2.setValue('data_type',utp);
									gr2.setValue('field_size',usz);
									gr2.setValue('choice',uisChoice);
									gr2.setValue('updated_by_script',brCurrent.updated_by_script);	
									if (utp == 'string' || utp == 'reference' || utp == 'integer') {
										gr2.setValue('old_value_length',uoldln);
										gr2.setValue('new_value_length',unewln);							
										gr2.setValue('old_value',uoldvalstr);
										gr2.setValue('new_value',unewvalstr);							
									}
									if (utp == 'boolean') {
										gr2.setValue('old_value',uoldvalstr);
										gr2.setValue('new_value',unewvalstr);					
									}
									if (utp == 'reference') {
										gr2.setValue('reference_to_table',uref);
									}
									gr2.insert();
								}
							} // try
							catch(error) {
								//Do nothing
								var b = 1;						
							}
						} // if (brCurrent[u] != brPrevious[u]) {
					} //if (excludedArr.indexOf(u) == -1) {
				} // if (brCurrent.hasOwnProperty(u)) {
			} //for (var x in brCurrent){
		} //if (action2 == 'update') {			
	},
	
    type: 'DebugTrackDataChanges'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-06-17 14:26:26</sys_created_on>
        <sys_id>45713f00dbe1181041d08f3813961978</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>DebugTrackDataChanges</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_45713f00dbe1181041d08f3813961978</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-06-17 16:10:17</sys_updated_on>
    </sys_script_include>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>false</active>
        <condition/>
        <conditional>false</conditional>
        <name>Send Data to uControl OBSOLETE</name>
        <run_as display_value="Robin Deaville">536d0c591b6a8050f953ff72cd4bcbf1</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:01:00</run_period>
        <run_start>2020-01-30 14:33:24</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[writeDebugLog('Start');

//current.name: Send Data to uControl
gs.info('SJ current.name: ' + current.name);
var gr0 = new GlideRecord('sys_trigger');
gr0.addQuery('name',current.name);
gr0.query();
if (gr0.next()) {
	var nextAction = gr0.getValue('next_action');
	gs.info('nextAction:' + nextAction);
}

var jobStartTime = new GlideDateTime();
var nextJobStartTime = new GlideDateTime();

var jobTable = 'x_tekso_twxapp01_scheduled_job_log';
var setupTable = 'x_tekso_twxapp01_setup';
var trackingTable = 'x_tekso_twxapp01_cmdb_changes';

// Number of seconds till the next run of the job
var gdt1 = new GlideDateTime('1970-01-01 00:00:00');
var gdt2 = new GlideDateTime(current.run_period); //Need to convert current.run_period into a GlideDateTime
var jobIntervalDuration = GlideDateTime.subtract(gdt1, gdt2);
var jobIntervalDurationMS = jobIntervalDuration.getNumericValue();
var jobIntervalDurationSeconds = parseInt(jobIntervalDurationMS/1000);
writeDebugLog('IntervalDuration: ' + jobIntervalDurationSeconds.toString());

nextJobStartTime.addSeconds(jobIntervalDurationSeconds);
gs.info('jobStartTime: ' + jobStartTime + ' nextJobStartTime: ' + nextJobStartTime);

var noOfPendingRecs = getNumberOfPendingRecords();	

var gr1 = new GlideRecord(jobTable); //x_tekso_twxapp01_scheduled_job_log
gr1.initialize();
if (noOfPendingRecs > 0) {
	gr1.setValue('pending_data_records_to_process',true);	
}
gr1.setValue('inserted_by_script','SJ Send Data to uControl'); // Debug
var jobSysID = gr1.insert();

var gr2 = new GlideRecord(setupTable); //x_tekso_twxapp01_setup
gr2.query();
if (gr2.next()) {
	// Get the sys_id for this script
	var sysIDForThisScript = current.sys_id;
	
	// sys_id of the setup record
	var setupSysID = gr2.getValue('sys_id'); // Needed for test connection
	var setupSysID2 = setupSysID.toString();
	
	var setupStatus = gr2.getValue('status') || ''; //Needed Now
	
	var pollingInterval = gr2.getValue('ucontrol_polling_interval_minutes') || 0; 
	var connTimeout = gr2.getValue('ucontrol_connection_timeout_minutes') || 0; 
	var url = gr2.getValue('ucontrol_url') || ''; 

	//Need to use getElement to do dot walking.
	var midServerSysID = gr2.getElement('ucontrol_mid_server.sys_id') || '';
	var midServerSysID2 = midServerSysID.toString(); 
	
	var midServerName = gr2.getElement('ucontrol_mid_server.name') || '';	
	var midServerName2 = midServerName.toString();
	
	var integrationUserSysID = gr2.getElement('ucontrol_integration_user.sys_id') || '';
	var integrationUserSysID2 = integrationUserSysID.toString();
	
	var integrationUserName = gr2.getElement('ucontrol_integration_user.name') || '';
	var integrationUserName2 = integrationUserName.toString(); 
	
	var maxRetries = gr2.getValue('max_retries') || 0;

	var connTestedAt = gr2.getValue('connection_tested_at');
	
	// Ensure that the setup table has the sys_id for this script so that if someone
	// changes the interval then this can be updated
	var setupScheduledJobSysID = gr2.getValue('scheduled_job_sys_id') || '';
	if (sysIDForThisScript != setupScheduledJobSysID) {
		gr2.setValue('scheduled_job_sys_id',sysIDForThisScript);
		gr2.setValue('updated_by_script','SJ Send Data to uControl'); // Debug
		gr2.update();
	}
	
	var setupNoOfPendingRecs = gr2.getValue('number_of_pending_records') || 0;
	// Only update if the value has changed
	if (setupNoOfPendingRecs != noOfPendingRecs) {
		gr2.setValue('number_of_pending_records',noOfPendingRecs);
		gr2.setValue('updated_by_script','SJ Send Data to uControl'); // Debug		
		gr2.update();
	}
			
	gr1.setValue('max_retries',maxRetries);
	gr1.setValue('ucontrol_connection_timeout_minutes',connTimeout);
	gr1.setValue('ucontrol_integration_user_name',integrationUserName2);
	gr1.setValue('ucontrol_integration_user_sys_id',integrationUserSysID2);
	gr1.setValue('ucontrol_mid_server_name',midServerName2);
	gr1.setValue('ucontrol_mid_server_sys_id',midServerSysID2);
	gr1.setValue('ucontrol_polling_interval_minutes',pollingInterval);
	gr1.setValue('ucontrol_url',url);
	gr1.setValue('setup_status',setupStatus);
	gr1.setValue('connection_tested_at',connTestedAt);
	gr1.setValue('updated_by_script','SJ Send Data to uControl');
	gr1.update();
	
	// The scheduled job takes data in chunks
	if (setupStatus == 'Sending') {
		var processCnt = 1;
		var totalProcessingTime = 0;
		var processingDurationSeconds = 0;
		var processingDurationSecondsDouble = 0;
		var secondsLeft = jobIntervalDurationSeconds;
		// Only do some work if the status is Sending
		while(processCnt == 1 || secondsLeft > processingDurationSecondsDouble) {
			var runStart = new GlideDateTime();
			writeDebugLog('runStart: ' + runStart);
			process(setupSysID2,jobStartTime,jobSysID,processCnt);

			var runEnd = new GlideDateTime();
			writeDebugLog('runEnd: ' + runEnd);
			var processingDuration = GlideDateTime.subtract(runStart,runEnd);
			var processingDurationMS = processingDuration.getNumericValue();
			processingDurationSeconds = parseInt(processingDurationMS/1000);
			// Add on 2 seconds as a contingency
			processingDurationSeconds = processingDurationSeconds + 2;
			
			// Now double the amount of time the last run took
			processingDurationSecondsDouble = processingDurationSeconds * 2;
			writeDebugLog('processingDurationSeconds: ' + processingDurationSeconds.toString());
			writeDebugLog('processingDurationSecondsDouble: ' + processingDurationSecondsDouble.toString());
			totalProcessingTime = totalProcessingTime + processingDurationSeconds;
			secondsLeft = jobIntervalDurationSeconds - totalProcessingTime;
			writeDebugLog('secondsLeft: ' + secondsLeft.toString());
			// Seconds left for next scheduled job run - is there time?
			if (secondsLeft > processingDurationSecondsDouble) {
				//Time left for another run
				processCnt++;
				writeDebugLog('Time for another run. RunCnt: ' + processCnt.toString());
			}
		} // while(processCnt == 1
	} // if (setupStatus == 'Sending') {
	

	var noOfPendingRecsAfter = getNumberOfPendingRecords();	
	var setupNoOfPendingRecs2 = gr2.getValue('number_of_pending_records') || 0;
	// Only update if the value has changed
	if (setupNoOfPendingRecs2 != noOfPendingRecsAfter) {
		gr2.setValue('number_of_pending_records',noOfPendingRecsAfter);
		gr2.setValue('updated_by_script','SJ Send Data to uControl'); // Debug		
		gr2.update();
	}
	
	// When was the last time a connection test was performed?
	connectionTestRequired(setupSysID2,url,midServerName2,midServerSysID2,connTimeout,connTestedAt);
	
} // if (gr0.next()) {
else {
	// Could not get gr0 record -- i.e. setup record could not be found
	gr1.setValue('setup_status','No Setup Record');
	gr1.setValue('updated_by_script','SJ Send Data to uControl');
	gr1.update();	
} // if (gr0.next()) {

//Record that the scheduled job has run - update x_tekso_twxapp01_configuration_checks
//Event x_tekso_twxapp01.configurationchecksetdt
var event = 'x_tekso_twxapp01.configurationchecksetdt';
gs.eventQueue(event, gr1, gs.getUserID(),'sj_send_data_to_ucontrol_last_ran_at');
//This event will trigger script action ConfigurationCheckSetDT
//Which will run var si2 = new x_tekso_twxapp01.UpdateConfigurationChecks();
//               si2.setDTLastRunAt('sj_send_data_to_ucontrol_last_ran_at'); // Fld

var finishedAt = GlideDateTime();
gr1.setValue('finished_at',finishedAt);
gr1.setValue('updated_by_script','SJ Send Data to uControl');
gr1.update();

writeDebugLog('End');

//Called by first code
function connectionTestRequired(setupSysID2,url,midServerName2,midServerSysID2,connTimeout,connTestedAt) {
	var now = new GlideDateTime();
	var dataReceivedRecently = false;
	var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';
	var gr1 = new GlideRecord(dataTable);
	gr1.addQuery('response_received',true);
	gr1.addQuery('response_status_message','OK');
	gr1.orderByDesc("sys_created_on"); // Most Recent
	gr1.setLimit(1);
	gr1.query();
	if (gr1.next()) {
		//Need to put this through GlideDateTime()
		var responseReceivedAt = new GlideDateTime(gr1.getValue('response_received_at'));
		var dur1 = new GlideDuration();
		dur1 = GlideDateTime.subtract(responseReceivedAt,now);// In Milliseconds
		var dur1secs = dur1.getNumericValue() / 1000; 
		var dur1mins = dur1.getNumericValue() / 1000 / 60;  // Minutes - will be floating point e.g. 69.206
		var dur1mins2 = parseInt(dur1mins); // e.g. 69
		if (dur1mins2 < 10) {
			// We have processed some data in the last 10 minutes
			dataReceivedRecently = true;
		}
	} // if (gr1.next()) {

	if (dataReceivedRecently == false) {
		//Need to put this through GlideDateTime()
		var connectionTestedAt = new GlideDateTime(connTestedAt);	

		var dur2 = new GlideDuration();
		dur2 = GlideDateTime.subtract(connectionTestedAt,now);// In Milliseconds
		var dur2secs = dur2.getNumericValue() / 1000; 
		var dur2mins = dur2.getNumericValue() / 1000 / 60;  // Minutes - will be floating point e.g. 69.206
		var dur2mins2 = parseInt(dur2mins); // e.g. 69

		if (dur2mins2 > 10) {
			// Only do a connection test if the mid server queue is empty - otherwise it may timeout
			if (sizeOfOutboundMIDServerQueue(midServerName2) == 0) {
				connectionTest(setupSysID2,url,midServerName2,midServerSysID2,connTimeout);
			}
		} // if (dur2mins2 > 10) 	
	} //if (dataReceivedRecently == false) {	
}

// Called by first code
function getNumberOfPendingRecords() {
	// Get the number of pending records
	var trackingTable = 'x_tekso_twxapp01_cmdb_changes';
	var rtnCnt = 0;
	var gr1 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
	gr1.addQuery('status','Pending');
	gr1.query();
	rtnCnt = gr1.getRowCount();
	return rtnCnt;
}

//Called by connectionTestRequired - which is called by first code
function sizeOfOutboundMIDServerQueue(midServerName) {
	//midServerName is no longer used as we need to check all 
	var rowCnt = 0;
	var gr1 = new GlideRecord('ecc_queue');
	//var qry = 'agent=mid.server.' + midServerName + '^queue=output^stateINready,processing';
	//Need to check the load of all MID Servers
	var qry = 'queue=output^stateINready,processing';	
	gr1.addEncodedQuery(qry);
	gr1.query();
	rowCnt = gr1.getRowCount();
	return rowCnt;
}

//Called by connectionTestRequired - which is called by first code
function connectionTest(setupSysID,url,midServerName,midServerSysID,connectionTimeOutMinutes) {
	
	// Remove any leading or trailing spaces from the URL
	url = url.replace(/^\s+|\s+$/g, '');

	var urlLength = url.length;
	var midServerNameLength = midServerName.length;
	var midServerSysIDLength = midServerSysID.length;

	if (urlLength > 0) {
		// Remove the last character if it is a /
		if (url.charAt(urlLength - 1) == '/') {
			url = url.substr(0, urlLength - 1);
		}
	}

	// Can only do a test if got a URL and a MID Server
	if (urlLength > 0 && midServerNameLength > 0 && midServerSysIDLength > 0) {

		// Check if there is already a record pending
		var connectionTestTable = 'x_tekso_twxapp01_connection_test';
		var gr1 = new GlideRecord(connectionTestTable);
		gr1.addQuery('setupf_record',setupSysID);
		gr1.addQuery('ucontrol_url',url);
		gr1.addQuery('ucontrol_mid_server_name',midServerName);
		gr1.addQuery('ucontrol_mid_server_sys_id',midServerSysID);	
		gr1.addQuery('status','Pending');			
		gr1.query();
		if (!gr1.next()) {

			// There is not already a record pending
			var dtRequest = new GlideDateTime();
			writeDebugLog('dtRequest: ' + dtRequest);

			// gets the user name
			var userName = gs.getUserName();
			writeDebugLog('userName: ' + userName);

			// e.g. dev91664
			var snInstance = gs.getProperty("instance_name");	
			// e.g. https://dev91664.service-now.com/
			var snURL = gs.getProperty("glide.servlet.uri");
			if (snURL.length > 0) {
				// Remove the last character if it is a /
				if (snURL.charAt(snURL.length - 1) == '/') {
					snURL = snURL.substr(0, snURL.length - 1);
				}
			}
			
			var source = 'ServiceNow';

			var json = '{\"source\":\"' + source + '\",';	// ServiceNow
			json = json  + '\"source_name\":\"' + snInstance + '\",'; // ServiceNow Instance e.g. dev91664
			json = json + '\"source_url\":\"' + snURL + '\",'; // ServiceNow URL e.g. https://dev91664.service-now.com/
			json = json +  '\"connection_requested\":\"' + dtRequest + '\",';	
			json = json + '\"user\":\"' + userName + '\"}'; // No comma at the end	

			var gdt = new GlideDateTime();
			var timeoutMinutes = connectionTimeOutMinutes;
			var timeoutSeconds = timeoutMinutes * 60;
			gdt.addSeconds(timeoutSeconds);

			var gr2 = new GlideRecord(connectionTestTable);
			gr2.initialize();
			gr2.setValue('status','Pending');
			gr2.setValue('setup_record',setupSysID);
			gr2.setValue('ucontrol_url',url);
			gr2.setValue('ucontrol_mid_server_name',midServerName);
			gr2.setValue('ucontrol_mid_server_sys_id',midServerSysID);
			gr2.setValue('request_will_time_out_at',gdt);
			gr2.setValue('json_request_body',json);
			gr2.setValue('total_length_of_json_request_body',json.length);
			gr2.setValue('start_sending_requested',false);
			gr2.setValue('test_connection_triggered_by','SJ Send Data to uControl');				
			gr2.setValue('inserted_by_script','SJ Send Data to uControl'); // Debug
			var connectionTestSysID = gr2.insert();

			// There is a BR on x_tekso_twxapp01_connection_test which will be triggered which will test the connection	
		} //if (!gr1.next()) {
	} // if (urlLength > 0 && midServerNameLength > 0 && midServerSysIDLength > 0) {	
}

//Called by first code
function process(setupSysID,jobStartTime,jobSysID,processCnt) {
	
	var trackingTable = 'x_tekso_twxapp01_cmdb_changes';
	
	// Get all the records that are Pending
	var processingID = gs.generateGUID();
	var sysIDArr = [];
	var sysIDsInBlockAreUnique = true;
	var dataToProcess = false;
	
	var gr1 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
	gr1.addQuery('status','Pending');
	gr1.addQuery('processing_id','');
	
	//This should only get the records that were created
	//before the schedule job started - this should stop the system from chasing its tail
	gr1.addQuery('sys_created_on','<',jobStartTime); 
	//Order by created on
	gr1.orderBy('sys_created_on'); // For descending use - gr2.orderByDesc("sys_created_on");
	gr1.setLimit(1);
	gr1.query();
	if (gr1.next()) {
		// Get 1 record
		// Is it test data or real data?
		var testData = gr1.getValue('test_data') || false;
		
		// Don't want to mix live data and test data together
		// Get the first record back - and see if it is test or live
		// If test then get 1000 test records
		// If live then get 1000 live records
		var gr2 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
		gr2.addQuery('status','Pending');
		gr2.addQuery('processing_id','');		
		gr2.addQuery('test_data',testData); 
		
		//This should only get the records that were created
		//before the schedule job started - this should stop the system from chasing its tail	
		gr2.addQuery('sys_created_on','<',jobStartTime); 	
		//Order by created on
		gr2.orderBy('sys_created_on'); // For descending use - gr2.orderByDesc("sys_created_on");
		gr2.setLimit(1000); // Set the limit to 1000 so we don't overload it
		gr2.query();		

		while(gr2.next()) {
			// Read the sys_id's and check if they are all unique
			var sysID = gr2.getValue('sys_id');
			if (sysIDArr.indexOf(sysID) == -1) {
				//sysID is not already in the array sysIDArr
				sysIDArr.push(sysID);
			}
			else {
				sysIDsInBlockAreUnique = false;
			}
			gr2.setValue('status','Processing');
			gr2.setValue('processing_id',processingID); // Used to ensure we pick up the correct block of data
			gr2.setValue('updated_by_script','SJ Send Data to uControl'); // Debug			
			gr2.update();
			dataToProcess = true;
		}	
	}
	
	if (dataToProcess == true) {
		//mainBit(setupSysID,processingID,sysIDsInBlockAreUnique,jobSysID,processCnt);
		
		var obj = {};
		obj.setupSysID = setupSysID.toString();
		obj.processingID = processingID.toString();
		obj.sysIDsInBlockAreUnique = sysIDsInBlockAreUnique.toString();
		obj.jobSysID = jobSysID.toString();
		obj.processCnt = processCnt.toString();
		var jsonData = JSON.stringify(obj);
		
		/*
		{
		"setupSysID": "e2959de9dbbf845041d08f38139619cc",
		"processingID": "6234bef6db30905041d08f381396192b",
		"sysIDsInBlockAreUnique": "true",
		"jobSysID": "ee343ef6db30905041d08f38139619f2",
		"processCnt": "1"
		}
		*/
		
		//V2 - do this via an async job
		gs.eventQueue('x_tekso_twxapp01.processdata', gr2, gs.getUserID(),jsonData);		

	}
}

// ------------------------------------------------

// Called by mainBit()
function setLastScanPerformedAt(setupTable) {
	var now = new GlideDateTime();
	var gr1 = new GlideRecord(setupTable); //x_tekso_twxapp01_setup
	gr1.query();
	if (gr1.next()) {
		gr1.setValue('last_scan_performed_at',now);	
		gr1.setValue('updated_by_script','SJ setLastScanPerformedAt'); // Debug
		gr1.update();
	}
}

// Called by mainBit()
function createNewLogRecord(setupSysID,breakReason,jobSysID,processCnt,processingID) {
// Create a new log record - x_tekso_twxapp01_processing_log and return the sys_id
	var logTable = 'x_tekso_twxapp01_processing_log';
	var jobTable = 'x_tekso_twxapp01_scheduled_job_log';
	
	var pollingInterval = 0;
	var timeout = 0;
	var url = '';
	var midServerSysID = '';
	var midServerSysID2 = '';
	var midServerName = '';
	var midServerName2 = '';	
	var integrationUserSysID = '';
	var integrationUserSysID2 = '';	
	var integrationUserName = '';
	var integrationUserName2 = '';	
	var maxRetries = 0;
	var jobStartedAt = new GlideDateTime();
	var gr0 = new GlideRecord(jobTable); //x_tekso_twxapp01_scheduled_job_log
	gr0.addQuery('sys_id',jobSysID);
	gr0.query();
	if (gr0.next()) {
		
		timeout = gr0.getValue('ucontrol_connection_timeout_minutes') || 0;
		integrationUserName = gr0.getValue('ucontrol_integration_user_name') || '';
		integrationUserName2 = integrationUserName.toString();		
		integrationUserSysID = gr0.getValue('ucontrol_integration_user_sys_id') || '';
		integrationUserSysID2 = integrationUserSysID.toString();		
		midServerName = gr0.getValue('ucontrol_mid_server_name') || '';
		midServerName2 = midServerName.toString(); 		
		midServerSysID = gr0.getValue('ucontrol_mid_server_sys_id') || '';
		midServerSysID2 = midServerSysID.toString(); 
		pollingInterval = gr0.getValue('ucontrol_polling_interval_minutes') || 0;
		url = gr0.getValue('ucontrol_url') || '';
		maxRetries = gr0.getValue('max_retries') || 0;
		jobStartedAt = gr0.getValue('sys_created_on');
	}
	
	var rtnSysID = '';
	var gr1 = new GlideRecord(logTable); //x_tekso_twxapp01_processing_log
	gr1.initialize();
	gr1.setValue('total_number_of_records_sent',0);
	gr1.setValue('reason_for_split',breakReason);
	
	gr1.setValue('scheduled_job_started_at',jobStartedAt);	
	gr1.setValue('link_to_scheduled_job_log_record',jobSysID.toString());
	gr1.setValue('scheduled_job_log_record_sys_id',jobSysID.toString());

	gr1.setValue('process_no',processCnt);
	gr1.setValue('processing_id',processingID); // Set on CMDB records in the job
	gr1.setValue('number_of_updates_sent',0);
	gr1.setValue('number_of_deletes_sent',0);	
	gr1.setValue('data_sent_updates_per_class','');
	gr1.setValue('data_sent_deletes_per_class','');	
	gr1.setValue('ucontrol_url',url);
	gr1.setValue('ucontrol_mid_server_sys_id',midServerSysID2);
	gr1.setValue('ucontrol_mid_server_name',midServerName);
	gr1.setValue('ucontrol_integration_user_sys_id',integrationUserSysID2);
	gr1.setValue('ucontrol_integration_user_name',integrationUserName2);
	gr1.setValue('max_retries',maxRetries);
	gr1.setValue('ucontrol_polling_interval_minutes',pollingInterval);
	gr1.setValue('ucontrol_connection_timeout_minutes',timeout);
	gr1.setValue('inserted_by_script','SJ createNewLogRecord'); // Debug
	
	rtnSysID = gr1.insert();
	return rtnSysID;
}

// Called by updateProcessingLog() - which is called by mainBit()
function sendSummary(recCnt,updCnt,delCnt) {
	// Builds a string like this: 3 records (3 updates , 0 deletes)
	var rtn = '';
	if (recCnt == 1) {
		rtn = '1 record';
	}
	else {
		rtn = recCnt.toString() + ' records';
	}	

	if (updCnt == 1) {
		rtn = rtn + ' (1 update';
	}
	else {
		rtn = rtn + ' (' + updCnt.toString() + ' updates';
	}

	if (delCnt == 1) {
		rtn = rtn + ' , 1 delete)';
	}
	else {
		rtn = rtn + ' , ' + delCnt.toString() + ' deletes)';
	}

	return rtn;
}

// Called by start and end of Scheduled Job
/* - NOT USED
function updateNumberOfPendingRecordsInSetupTable(noOfRecsNew) {
	var setupTable = 'x_tekso_twxapp01_setup';

	var gr1 = new GlideRecord(setupTable); //x_tekso_twxapp01_setup
	gr1.query();
	if (gr1.next()) {
		var noOfRecsOld = gr1.getValue('number_of_pending_records') || 0;
		// Only update if the value has changed
		if (noOfRecsOld != noOfRecsNew) {
			gr1.setValue('number_of_pending_records',noOfRecsNew);
			gr1.setValue('updated_by_script','SJ updateNumberOfPendingRecordsInSetupTable'); // Debug			
			gr1.update();
		}
	}
}
*/

// Called by mainBit()
function createLinkRecord(linkTable,operation,table,baseTable,sourceRecordSysID,data_sys_id,trackingSysID,logSysID) {
				
	var gr1 = new GlideRecord(linkTable);
	gr1.initialize();
	gr1.setValue('operation',operation); // insert / delete
	gr1.setValue('table',table); // Blank for Delete
	gr1.setValue('base_table',baseTable);
	gr1.setValue('source_record_sys_id',sourceRecordSysID); // Sys_id for the cmdb_ci / cmdb_rel_ci record to be processed
	gr1.setValue('link_to_rest_data_record',data_sys_id);
	gr1.setValue('link_to_processing_record',trackingSysID);
	gr1.setValue('link_to_processing_log_record',logSysID);
	gr1.setValue('rest_data_record_sys_id',data_sys_id);
	gr1.setValue('processing_record_sys_id',trackingSysID);
	gr1.setValue('processing_log_record_sys_id',logSysID);
	gr1.setValue('inserted_by_script','SJ createLinkRecord'); // Debug	
	gr1.insert();
}

//Called by mainBit()
function getDataRecordNo(dataTable,data_sys_id) {
	var recordNo = '';
	var gr1 = new GlideRecord(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
	gr1.addQuery('sys_id',data_sys_id);
	gr1.query();
	if (gr1.next()) {
		recordNo = gr1.getValue('number') || '';
	}
	return recordNo;
}


// Called by mainBit()
/* Not used - would be used for INSERT
function createDataRecordWithJSON(dataTable,operation,baseTable,midServerName,midServerSysID,url,JSONRequestBody,noOfRecsInJSON,logSysID) {
	var gr1 = new GlideRecord(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
	gr1.initialize();
	gr1.setValue('operation',operation); // insert
	gr1.setValue('base_table',baseTable);
	gr1.setValue('ucontrol_mid_server_name',midServerName);
	gr1.setValue('ucontrol_mid_server_sys_id',midServerSysID);		
	gr1.setValue('ucontrol_url',url);						
	gr1.setValue('json_request_body',JSONRequestBody);
	gr1.setValue('total_length_of_json_request_body',JSONRequestBody.length);
	gr1.setValue('no_of_cmdb_records_in_json_request_body',noOfRecsInJSON);
	gr1.setValue('link_to_processing_log_record',logSysID);
	gr1.setValue('processing_log_record_sys_id',logSysID);	
	gr1.setValue('inserted_by_script','SJ createDataRecordWithJSON'); // Debug	
	var rtn_sys_id = gr1.insert();
	
	return rtn_sys_id;
}
*/

// Called by mainBit()
function createDataRecordWithEmptyJSON(dataTable,operation,baseTable,midServerName,midServerSysID,url,logSysID) {

	var gr1 = new GlideRecord(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
	gr1.initialize();
	gr1.setValue('operation',operation); // insert / delete
	gr1.setValue('base_table',baseTable);
	gr1.setValue('ucontrol_mid_server_name',midServerName);
	gr1.setValue('ucontrol_mid_server_sys_id',midServerSysID);		
	gr1.setValue('ucontrol_url',url);
	gr1.setValue('json_request_body','');
	gr1.setValue('total_length_of_json_request_body',0);	
	gr1.setValue('no_of_cmdb_records_in_json_request_body',0);
	gr1.setValue('link_to_processing_log_record',logSysID);	
	gr1.setValue('processing_log_record_sys_id',logSysID);		
	gr1.setValue('inserted_by_script','SJ createDataRecordWithEmptyJSON'); // Debug	
	var rtn_sys_id = gr1.insert();
	
	return rtn_sys_id;
}

// Called by mainBit()
function addJSONToDataRecord(dataTable,data_sys_id,jsonRequestBody,noOfRecsInJSON) {
	
	var gr1 = new GlideRecord(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
	gr1.addQuery('sys_id',data_sys_id);
	gr1.query();
	if (gr1.next()) {
		gr1.setValue('json_request_body',jsonRequestBody);
		gr1.setValue('total_length_of_json_request_body',jsonRequestBody.length);		
		gr1.setValue('no_of_cmdb_records_in_json_request_body',noOfRecsInJSON);
		gr1.setValue('updated_by_script','SJ addJSONToDataRecord'); // Debug		
		gr1.update();
	}	
}


// Called by mainBit()
function updateProcessingLog(logSysID) {
	
	writeDebugLog('updateProcessingLog - Start');
	
	var linkTable = 'x_tekso_twxapp01_cmdb_link_to_rest_data';
	var logTable = 'x_tekso_twxapp01_processing_log';
	var setupTable = 'x_tekso_twxapp01_setup';
	var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';
	
	var gr1 = new GlideRecord(linkTable); //'x_tekso_twxapp01_cmdb_link_to_rest_data'
	gr1.orderBy('sys_created_on');
	gr1.addQuery('link_to_processing_log_record',logSysID);
	gr1.query();
	var noOfRestResponseRecords = 0;
	var firstRestResponseSysID = '';
	var lastRestResponseSysID = '';
	var linkSysID = '';
	var totalSent = gr1.getRowCount();	
	var deletesSent = 0;
	var updatesSent = 0;	
	var sentUpdPerClsArr = [];
	var sentUpdPerClsArr2 = [];	
	var sentDelPerClsArr = [];
	var sentDelPerClsArr2 = [];
	var sentUpdPerCls = '';	
	var sentDelPerCls = '';	
	var idx = 0;
	
	while(gr1.next()) {
		noOfRestResponseRecords = noOfRestResponseRecords + 1;
		linkSysID = gr1.getValue('sys_id');
		if (noOfRestResponseRecords == 1) {
			firstRestResponseSysID = linkSysID.toString();
		}
		lastRestResponseSysID = linkSysID.toString();
		
		var table = gr1.getValue('table') || '';
		var op = gr1.getValue('operation') || '';
		if (op == 'update') {
			updatesSent++;
			idx = sentUpdPerClsArr.indexOf(table);
			if (idx < 0) {
				// The table  \ class is not already in the array - so add it
				sentUpdPerClsArr.push(table);
				sentUpdPerClsArr2.push(1);
			}
			else {
				// Increment the count for this table \ class				
				sentUpdPerClsArr2[idx] = sentUpdPerClsArr2[idx] + 1;
			}			
		} //if (op == 'update') {
		if (op == 'delete') {
			deletesSent++;
			idx = sentDelPerClsArr.indexOf(table);
			if (idx < 0) {
				// The table \ class is not already in the array - so add it				
				sentDelPerClsArr.push(table);
				sentDelPerClsArr2.push(1);
			}
			else {
				// Increment the count for this table \ class
				sentDelPerClsArr2[idx] = sentDelPerClsArr2[idx] + 1;
			}			
		} //if (op == 'delete') {
	} //while(gr1.next()) {

	//Totals per class - combine onto one string
	if (updatesSent > 0) {
		// Got at least one
		for (idx = 0; idx < sentUpdPerClsArr.length; idx++) {
			var sentUpdPerClsCnt = sentUpdPerClsArr2[idx].toString();
			if (idx == 0) {
				// 1st Record
				sentUpdPerCls = sentUpdPerClsArr[idx] + ': ' + sentUpdPerClsCnt;
			}
			else {
				sentUpdPerCls = sentUpdPerCls + ', ' + sentUpdPerClsArr[idx] + ': ' + sentUpdPerClsCnt;
			}
		} //for			
	} //if (updatesSent > 0) {
	
	if (deletesSent > 0) {
		// Got at least one			
		for (idx = 0; idx < sentDelPerClsArr.length; idx++) {
			var sentDelPerClsCnt = sentDelPerClsArr2[idx].toString();
			if (idx == 0) {
				// 1st Record					
				sentDelPerCls = sentDelPerClsArr[idx] + ': ' + sentDelPerClsCnt;
			}
			else {
				sentDelPerCls = sentDelPerCls + ', ' + sentDelPerClsArr[idx] + ': ' + sentDelPerClsCnt;
			}
		} //for			
	} //if (deletesSent > 0)

	var gr2 = new GlideRecord(dataTable); //'x_tekso_twxapp01_rest_data_to_ucontrol'
	gr2.orderBy('sys_created_on');
	gr2.addQuery('link_to_processing_log_record',logSysID);
	gr2.query();
	var noOfRestRecords = 0;
	var firstRestSysID = '';
	var lastRestSysID = '';
	var restSysID = '';
	while(gr2.next()) {
		noOfRestRecords = noOfRestRecords + 1;
		restSysID = gr2.getValue('sys_id');
		if (noOfRestRecords == 1) {
			firstRestSysID = restSysID.toString();
		}
		lastRestSysID = restSysID.toString();
	} //while(gr2.next()) {
		
	//Totals	
	var gr3 = new GlideRecord(logTable); //x_tekso_twxapp01_processing_log
	gr3.addQuery('sys_id',logSysID);
	gr3.query();
	if (gr3.next()) {
		var dt = gr2.getValue('sys_created_on');
		gr3.setValue('total_number_of_records_sent',totalSent);
		gr3.setValue('number_of_updates_sent',updatesSent);
		gr3.setValue('number_of_deletes_sent',deletesSent);

		gr3.setValue('data_sent_updates_per_class',sentUpdPerCls);
		gr3.setValue('data_sent_deletes_per_class',sentDelPerCls);	
		var dataSentSummary = sendSummary(totalSent,updatesSent,deletesSent);
		gr3.setValue('data_sent_summary',dataSentSummary);
		
		//sending completed at
		var completedAt = GlideDateTime();
		gr3.setValue('sending_completed_at',completedAt);
		gr3.setValue('updated_by_script','SJ updateProcessingLog'); // Debug		
		
		gr3.setValue('link_to_first_rest_response_record',firstRestResponseSysID);
		gr3.setValue('link_to_last_rest_response_record',lastRestResponseSysID);
		gr3.setValue('first_rest_response_record_sys_id',firstRestResponseSysID);
		gr3.setValue('last_rest_response_record_sys_id',lastRestResponseSysID);
		gr3.setValue('number_of_rest_resonse_records',noOfRestResponseRecords);		

		gr3.setValue('link_to_first_rest_data_record',firstRestSysID);
		gr3.setValue('link_to_last_rest_data_record',lastRestSysID);
		gr3.setValue('first_rest_data_record_sys_id',firstRestSysID);
		gr3.setValue('last_rest_data_record_sys_id',lastRestSysID);
		gr3.setValue('number_of_rest_data_records',noOfRestRecords);		
		
		gr3.update();
		
		var gr4 = new GlideRecord(setupTable); //x_tekso_twxapp01_setup
		gr4.query();
		if (gr4.next()) {
			gr4.setValue('link_to_last_processing_log_record',logSysID);		
			gr4.setValue('last_processing_data_sent_summary',dataSentSummary);
			gr4.setValue('last_processing_at',dt);			
			gr4.setValue('updated_by_script','SJ updateProcessingLog'); // Debug		
			gr4.update();
		}		
	}
	
	writeDebugLog('updateProcessingLog - End');	
}

function mainBit(setupSysID,processingID,sysIDsInBlockAreUnique,jobSysID,processCnt) { 
	
	writeDebugLog('mainBit Start');
	
	var trackingTable = 'x_tekso_twxapp01_cmdb_changes';
	var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';
	var linkTable = 'x_tekso_twxapp01_cmdb_link_to_rest_data';
	var logTable = 'x_tekso_twxapp01_processing_log';
	var setupTable = 'x_tekso_twxapp01_setup';

	var recCnt = 0;
	var trackingSysID = '';
	var operation = '';
	var baseTable = '';
	var table = '';
	var testData = false;
	var midServerName = '';
	var midServerSysID = '';
	var user = '';
	var url ='';
	var sourceRecordSysID = '';
	var dt = new GlideDateTime();
	var jsonRequestBody = '';
	var prevOperation = '';
	var prevBaseTable = '';
	var prevTestData = false;
	var prevMIDServerName = '';
	var prevMIDServerSysID = '';
	var prevURL = '';
	var prevUser = '';

	var deletesToProcess = 0;
	var deleteDataList = '';
	var deleteMetaData = '';
	var delete_data_sys_id = '';
	var deleteJsonRequestBody = '';
	
	var deleteDataListSize = 0;
	var deleteMetaDataSize = 0;
	var deleteJsonRequestBodySize = 0;
	var deleteDataToFlushOut = false;
	
	var updatesToProcess = 0;
	var updateDataList = '';
	var updateMetaData = '';
	var update_data_sys_id = '';
	var updateJsonRequestBody = '';

	var updateDataListSize = 0;
	var updateMetaDataSize = 0;
	var updateJsonRequestBodySize = 0;
	var updateDataToFlushOut = false;
	
	var insertData = '';
	var insertJsonRequestBody = '';
	
	var data_sys_id = '';	
	var dataRecordNo = '';
	var metaData = '';

	var logRecordCreated = false;
	var logSysID = '';
	var testSize = 0;
	
	var breakReason = 'First';
	
	setLastScanPerformedAt(setupTable); //updates setup.last_scan_performed_at = now

	var gr2 = new GlideRecord(trackingTable); //x_tekso_twxapp01_cmdb_changes
	gr2.addQuery('status','Processing');
	gr2.addQuery('processing_id',processingID); // Used to ensure we pick up the correct block of data
	//as if there are jobs running concurrently then status = Processing may pick up the wrong records
	if (sysIDsInBlockAreUnique == true) {
		//If all the sysIDs in the block are unique then we can change their order
		//Which should make things more efficient
		gr2.orderBy('operation');     
		gr2.orderBy('base_table');
		gr2.orderBy('table');		
	}
	gr2.orderBy('sys_created_on'); // For descending use - gr2.orderByDesc("sys_created_on");
	gr2.query();
	while(gr2.next()) {	
		recCnt++;
		trackingSysID = gr2.getValue('sys_id');
		sourceRecordSysID = gr2.getValue('source_record_sys_id') || '';	
		operation = gr2.getValue('operation') ||'';
		baseTable = gr2.getValue('base_table') || '';
		table = gr2.getValue('table') || '';	
		// If this is true then we are sending testData
		testData = gr2.getValue('test_data') || false;
		
		midServerName = gr2.getValue('ucontrol_mid_server_name') || '';
		midServerSysID = gr2.getValue('ucontrol_mid_server_sys_id') || '';	
		url = gr2.getValue('ucontrol_url') || '';
		user = gr2.getValue('sys_created_by') || '';	
		dt = gr2.getValue('sys_created_on') || '';
		jsonRequestBody = gr2.getValue('json_request_body') || '';
		metaData = gr2.getValue('metadata') || '';

		// Is there any delete or update data that needs to be pushed out first?
		if (recCnt > 1) {

			if (deletesToProcess > 0) {
				updatesToProcess = 0;
				updateDataList = '';
				
				updateDataListSize = 0;
				updateMetaDataSize = 0;
				updateJsonRequestBodySize = 0;
				updateDataToFlushOut = false;
				
				//If we add on the length of the latest jsonRequestBody to the existing - how big is it?
				testSize = deleteJsonRequestBodySize + jsonRequestBody.length;
				
				// Operation is not delete or change in baseTable / midServer / url / testData
				// Don't put data and testData in the same block
				if (operation != 'delete') {
					// Delete data to be flushed out
					deleteDataToFlushOut = true;		
					breakReason = 'operation NOT delete. New operation is: ' + operation;					
				}				

				if (deleteDataToFlushOut == false & baseTable != prevBaseTable) {
					// Delete data to be flushed out
					deleteDataToFlushOut = true;		
					breakReason = 'baseTable NOT prevBaseTable. baseTable: ' + baseTable + ' prevBaseTable: ' + prevBaseTable;
				}		

				if (deleteDataToFlushOut == false & midServerName != prevMIDServerName) {
					// Delete data to be flushed out
					deleteDataToFlushOut = true;		
					breakReason = 'midServerName NOT prevMIDServerName. midServerName: ' + midServerName + ' prevMIDServerName: ' + prevMIDServerName;
				}	

				if (deleteDataToFlushOut == false & url != prevURL) {
					// Delete data to be flushed out
					deleteDataToFlushOut = true;		
					breakReason = 'url NOT prevURL. url: ' + url + ' prevURL: ' + prevURL;
				}	

				if (deleteDataToFlushOut == false & testData != prevTestData) {
					// Delete data to be flushed out
					deleteDataToFlushOut = true;		
					breakReason = 'testData NOT prevTestData. testData: ' + testData + ' prevTestData: ' + prevTestData;
				}

				if (deleteDataToFlushOut == false & deletesToProcess > 1000) {
					// Delete data to be flushed out
					deleteDataToFlushOut = true;		
					breakReason = 'deletesToProcess > 1000';
				}
							
				//5,000,000 is max size of json field
				if (deleteDataToFlushOut == false & operation == 'delete' & testSize > 5000000) {
					// Need to check if there is enough room to add in another delete
					// Or do we need to flush this out and then start a new one?
					deleteDataToFlushOut = true;
					breakReason = '5,000,000 is max size of json field';
				}
				
				if (deleteDataToFlushOut == true) {
					// PROCESS deleteData			
					deleteDataList = '\"deletedData\": [' + deleteDataList + ']';
					deleteJsonRequestBody = '{' + deleteMetaData + ',' + deleteDataList + '}';
					
					addJSONToDataRecord(dataTable,delete_data_sys_id,deleteJsonRequestBody,deletesToProcess);
					
					gs.eventQueue('x_tekso_twxapp01.outboundrestprocess', gr2, gs.getUserID(),delete_data_sys_id);
					
					deletesToProcess = 0;
					deleteDataList = '';
					deleteDataListSize = 0;
					deleteMetaDataSize = 0;
					deleteJsonRequestBodySize = 0;
					deleteDataToFlushOut = false;
					
				} // deletes to flush out
			} // if deletesToProcess > 0	
			
			if (updatesToProcess > 0) {
				deletesToProcess = 0;
				deleteDataList = '';

				deleteDataListSize = 0;
				deleteMetaDataSize = 0;
				deleteJsonRequestBodySize = 0;
				deleteDataToFlushOut = false;
				
				//If we add on the length of the latest jsonRequestBody to the existing - how big is it?
				testSize = updateJsonRequestBodySize + jsonRequestBody.length;
				
				// Operation is not update or change in baseTable / midServer / url
				// Don't put data and testData in the same block		
				if (operation != 'update') {
					// Update data to be flushed out
					updateDataToFlushOut = true;	
					breakReason = 'operation NOT delete. New operation is: ' + operation;					
				}				

				if (updateDataToFlushOut == false & baseTable != prevBaseTable) {
					// Update data to be flushed out
					updateDataToFlushOut = true;		
					breakReason = 'baseTable NOT prevBaseTable. baseTable: ' + baseTable + ' prevBaseTable: ' + prevBaseTable;
				}		

				if (updateDataToFlushOut == false & midServerName != prevMIDServerName) {
					// Update data to be flushed out
					updateDataToFlushOut = true;	
					breakReason = 'midServerName NOT prevMIDServerName. midServerName: ' + midServerName + ' prevMIDServerName: ' + prevMIDServerName;
				}	

				if (updateDataToFlushOut == false & url != prevURL) {
					// Update data to be flushed out
					updateDataToFlushOut = true;	
					breakReason = 'url NOT prevURL. url: ' + url + ' prevURL: ' + prevURL;
				}	

				if (updateDataToFlushOut == false & testData != prevTestData) {
					// Update data to be flushed out
					updateDataToFlushOut = true;	
					breakReason = 'testData NOT prevTestData. testData: ' + testData + ' prevTestData: ' + prevTestData;
				}

				if (updateDataToFlushOut == false & updatesToProcess > 1000) {
					// Update data to be flushed out
					updateDataToFlushOut = true;	
					breakReason = 'updatesToProcess > 1000';
				}
							
				//5,000,000 is max size of json field
				if (updateDataToFlushOut == false & operation == 'update' & testSize > 5000000) {
					// Need to check if there is enough room to add in another update
					// Or do we need to flush this out and then start a new one?
					updateDataToFlushOut = true;
					breakReason = '5,000,000 is max size of json field';
				}
				
				if (updateDataToFlushOut == true) {					
					// PROCESS updateData			
					updateDataList = '\"updateData\": [' + updateDataList + ']';				
					updateJsonRequestBody = '{' + updateMetaData + ',' + updateDataList + '}';
						
					addJSONToDataRecord(dataTable,update_data_sys_id,updateJsonRequestBody,updatesToProcess);
					
					gs.eventQueue('x_tekso_twxapp01.outboundrestprocess', gr2, gs.getUserID(),update_data_sys_id);
					
					updatesToProcess = 0;
					updateDataList = '';
					updateDataListSize = 0;
					updateMetaDataSize = 0;
					updateJsonRequestBodySize = 0;
					updateDataToFlushOut = false;
							
				} // updates to flush out
			} // if updatesToProcess > 0
			
		} // if recCnt > 1

		// Normal insert
		if (operation == 'insert') {
			deletesToProcess = 0;
			deleteDataList = '';
			updatesToProcess = 0;
			updateDataList = '';
			
			updateDataListSize = 0;
			updateMetaDataSize = 0;
			updateJsonRequestBodySize = 0;
			updateDataToFlushOut = false;

			deleteDataListSize = 0;
			deleteMetaDataSize = 0;
			deleteJsonRequestBodySize = 0;
			deleteDataToFlushOut = false;
			
			if (logRecordCreated == false) {
				// If not already done so - Create a new log record - x_tekso_twxapp01_processing_log and get back the sys_id
				//x_tekso_twxapp01_processing_log
				logSysID = createNewLogRecord(setupSysID,breakReason,jobSysID,processCnt,processingID); 
				breakReason = '';
				// Add the sys_id for the log to the setup table
				/*
				updateSetupAddProcessingLogRef(setupTable,logSysID);
				*/
				logRecordCreated = true;
				//logSysID is the sys_id for the log record
			}
			
			// 1 Record
			/* use createDataRecordWithEmptyJSON so we can get back the sys_id to include in the json
			data_sys_id = createDataRecordWithJSON(dataTable,operation,baseTable,midServerName,midServerSysID,url,insertJsonRequestBody,1,logSysID);
			*/
			data_sys_id = createDataRecordWithEmptyJSON(dataTable,operation,baseTable,midServerName,midServerSysID,url,logSysID);
			dataRecordNo = getDataRecordNo(dataTable,data_sys_id);			
			
			insertData = '\"insertedData\": ' + jsonRequestBody;
			metaData = metaData + ',\"data_sys_id\":\"' + data_sys_id + '\"';
			metaData = metaData + ',\"data_record_no\":\"' + dataRecordNo + '\"';	
			
			//Flag if test data
			if (testData == true) {
				metaData = metaData + ',\"test_data\":\"true\"';	
			}
			insertJsonRequestBody = '{' + metaData + ',' + insertData + '}';

			addJSONToDataRecord(dataTable,data_sys_id,insertJsonRequestBody,1);			
			createLinkRecord(linkTable,operation,table,baseTable,sourceRecordSysID,data_sys_id,trackingSysID,logSysID);
			
			gs.eventQueue('x_tekso_twxapp01.outboundrestprocess', gr2, gs.getUserID(),data_sys_id);
		}

		// If delete then store it up and process later
		if (operation == 'delete') {
			updatesToProcess = 0;
			updateDataList = '';
			
			updateDataListSize = 0;
			updateMetaDataSize = 0;
			updateJsonRequestBodySize = 0;
			updateDataToFlushOut = false;
			
			// Store up the delete record
			if (deletesToProcess == 0) {
				// First one
				deleteDataListSize = 0;
				deleteMetaDataSize = 0;
				deleteJsonRequestBodySize = 0;
				
				if (logRecordCreated == false) {
					// If not already done so - Create a new log record - x_tekso_twxapp01_processing_log and get back the sys_id
					//x_tekso_twxapp01_processing_log
					logSysID = createNewLogRecord(setupSysID,breakReason,jobSysID,processCnt,processingID); 
					breakReason = '';					
					// Add the sys_id for the log to the setup table
					/*
					updateSetupAddProcessingLogRef(setupTable,logSysID);
					*/
					logRecordCreated = true;
					//logSysID is the sys_id for the log record
				}	
				
				delete_data_sys_id = createDataRecordWithEmptyJSON(dataTable,operation,baseTable,midServerName,midServerSysID,url,logSysID);
				dataRecordNo = getDataRecordNo(dataTable,delete_data_sys_id);
				
				createLinkRecord(linkTable,operation,table,baseTable,sourceRecordSysID,delete_data_sys_id,trackingSysID,logSysID);		
				deleteDataList = '';
				deleteMetaData = metaData + ',\"data_sys_id\":\"' + delete_data_sys_id + '\"';
				deleteMetaData = deleteMetaData + ',\"data_record_no\":\"' + dataRecordNo + '\"';
				
				//Flag if test data
				if (testData == true) {
					deleteMetaData = deleteMetaData + ',\"test_data\":\"true\"';	
				}								
			}
			else {
				// Not the first one
				deleteDataList = deleteDataList + ',';

				if (logRecordCreated == false) {
					// If not already done so - Create a new log record - x_tekso_twxapp01_processing_log and get back the sys_id
					//x_tekso_twxapp01_processing_log
					logSysID = createNewLogRecord(setupSysID,breakReason,jobSysID,processCnt,processingID); 
					breakReason = '';					
					/*
					// Add the sys_id for the log to the setup table
					updateSetupAddProcessingLogRef(setupTable,logSysID);	
					*/
					logRecordCreated = true;
					//logSysID is the sys_id for the log record
				}					
				createLinkRecord(linkTable,operation,table,baseTable,sourceRecordSysID,delete_data_sys_id,trackingSysID,logSysID);			
			}		
			deleteDataList = deleteDataList + jsonRequestBody;
			
			deleteDataListSize = deleteDataList.length;
			deleteMetaDataSize = deleteMetaData.length;
			deleteJsonRequestBodySize = deleteDataListSize + deleteMetaDataSize + 3; // { metaData , data }
			
			deletesToProcess++;					
		} // if (operation == 'delete')
		
		// If update then store it up and process later
		if (operation == 'update') {
			deletesToProcess = 0;
			deleteDataList = '';
			deleteDataListSize = 0;
			deleteMetaDataSize = 0;
			deleteJsonRequestBodySize = 0;
			deleteDataToFlushOut = false;
			
			// Store up the update record
			if (updatesToProcess == 0) {
				// First one
				updateDataListSize = 0;
				updateMetaDataSize = 0;
				updateJsonRequestBodySize = 0;
				
				if (logRecordCreated == false) {
					// If not already done so - Create a new log record - x_tekso_twxapp01_processing_log and get back the sys_id
					//x_tekso_twxapp01_processing_log
					logSysID = createNewLogRecord(setupSysID,breakReason,jobSysID,processCnt,processingID); 
					breakReason = '';					
					/*
					// Add the sys_id for the log to the setup table
					updateSetupAddProcessingLogRef(setupTable,logSysID);	
					*/
					logRecordCreated = true;
					//logSysID is the sys_id for the log record
				}					
				update_data_sys_id = createDataRecordWithEmptyJSON(dataTable,operation,baseTable,midServerName,midServerSysID,url,logSysID);
				dataRecordNo = getDataRecordNo(dataTable,update_data_sys_id);
				
				createLinkRecord(linkTable,operation,table,baseTable,sourceRecordSysID,update_data_sys_id,trackingSysID,logSysID);		
				updateDataList = '';
				updateMetaData = metaData + ',\"data_sys_id\":\"' + update_data_sys_id + '\"';
				updateMetaData = updateMetaData + ',\"data_record_no\":\"' + dataRecordNo + '\"';	
				
				//Flag if test data
				if (testData == true) {
					updateMetaData  = updateMetaData  + ',\"test_data\":\"true\"';	
				}				
			}
			else {
				// Not the first one
				updateDataList = updateDataList + ',';

				if (logRecordCreated == false) {
					// If not already done so - Create a new log record - x_tekso_twxapp01_processing_log and get back the sys_id
					//x_tekso_twxapp01_processing_log
					logSysID = createNewLogRecord(setupSysID,breakReason,jobSysID,processCnt,processingID); 
					breakReason = '';					
					/*
					// Add the sys_id for the log to the setup table
					updateSetupAddProcessingLogRef(setupTable,logSysID);
					*/
					logRecordCreated = true;
					//logSysID is the sys_id for the log record
				}							
				createLinkRecord(linkTable,operation,table,baseTable,sourceRecordSysID,update_data_sys_id,trackingSysID,logSysID);			
			}		
			updateDataList = updateDataList + jsonRequestBody;
			
			updateDataListSize = updateDataList.length;
			updateMetaDataSize = updateMetaData.length;
			updateJsonRequestBodySize = updateDataListSize + updateMetaDataSize + 3; // { metaData , data }
			
			updatesToProcess++;					
		} // if (operation == 'delete')
		
		prevOperation = operation;
		prevBaseTable = baseTable;
		prevMIDServerName = midServerName;
		prevMIDServerSysID = midServerSysID;
		prevURL = url;
		prevUser = user;
		prevTestData = testData;
		
	} // while(gr2.next()) 

	// Gone through all the records
	// There may be deletes or updates banked up that need to be output
	if (deletesToProcess > 0) {
		// There are some deletes left to process
		deleteDataList = '\"deletedData\": [' + deleteDataList + ']';	
		jsonRequestBody = '{' + deleteMetaData + ',' + deleteDataList + '}';
		
		addJSONToDataRecord(dataTable,delete_data_sys_id,jsonRequestBody,deletesToProcess);

		gs.eventQueue('x_tekso_twxapp01.outboundrestprocess', gr2, gs.getUserID(),delete_data_sys_id);
		
	} // if (deletesToProcess > 0) 

	if (updatesToProcess > 0) {
		// There are some updates left to process
		updateDataList = '\"updatedData\": [' + updateDataList + ']';	
		jsonRequestBody = '{' + updateMetaData + ',' + updateDataList + '}';
				
		addJSONToDataRecord(dataTable,update_data_sys_id,jsonRequestBody,updatesToProcess);
				
		gs.eventQueue('x_tekso_twxapp01.outboundrestprocess', gr2, gs.getUserID(),update_data_sys_id);
	} // if (updatesToProcess > 0)
	
	// stats
/*
	if (stsRecordCount > 0 && logRecordCreated == true) {
		updateProcessingStats(logSysID,stsRecordCount,stsUpdateCount,stsDeleteCount,stsUpdPerClsArr,stsUpdPerClsArr2,stsDelPerClsArr,stsDelPerClsArr2);

	} // if (stsRecordCount > 0 && logRecordCreated == true) {
*/	
	// processing_completed_at
	if (logRecordCreated == true) {
		updateProcessingLog(logSysID);
		//setProcessingCompleteAtInLog(logTable,logSysID);
	}
	
	writeDebugLog('mainBit End');
}

function writeDebugLog(msg) {
	var debugTable = 'x_tekso_twxapp01_debug_log';
	var gr1 = new GlideRecord(debugTable);
	gr1.initialize();
	gr1.setValue('message',msg);
	gr1.setValue('updated_by_script','SJ Send Data to uControl');	
	gr1.insert();
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-01-30 15:00:07</sys_created_on>
        <sys_id>45dfbb5bdbe6001041d08f381396193a</sys_id>
        <sys_mod_count>287</sys_mod_count>
        <sys_name>Send Data to uControl OBSOLETE</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sysauto_script_45dfbb5bdbe6001041d08f381396193a</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-05-22 08:17:37</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>test_connection_action</action_name>
        <active>true</active>
        <client>true</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition>current.start_sending_requested == false &amp;&amp; current.connection_test_requested == false</condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>Test Connection</name>
        <onclick>runTestClientCode()</onclick>
        <order>105</order>
        <script><![CDATA[//Client-side 'onclick' function
function runTestClientCode(){

	var abort = false;
	
	var url = g_form.getValue('ucontrol_url') || '';
	var mid_server = '';
	var canReadMIDServerField = true;
	// Put the mid_server in a try catch block in case the user does not have access to this
	try {
		mid_server = g_form.getDisplayBox('ucontrol_mid_server').value || '';
	}
	catch(err) {
		//alert(err);
		//TypeError: Cannot read property 'value' of undefined
		mid_server = '';
		canReadMIDServerField = false;
	}

	if (url == "") {
		g_form.hideFieldMsg('ucontrol_url');
		g_form.showFieldMsg('ucontrol_url','The field is blank','error');
		abort = true;
	}

	if (canReadMIDServerField == false) {
		g_form.clearMessages();
		g_form.addErrorMessage("Test Connection Action Cannot Be Performed - Cannot access the MID Server table");
		abort = true;
	}

	if (canReadMIDServerField == true && mid_server == "") {
		g_form.hideFieldMsg('ucontrol_mid_server');
		g_form.showFieldMsg('ucontrol_mid_server','The field is blank','error');
		abort = true;
	}	
	
	if (abort == true) {
		return false; //Abort submission		
	}
	
	if (abort == false) {
		// Check the load on ecc_queue
		var ga = new GlideAjax('x_tekso_twxapp01.ClientReadECCQueue');
		ga.addParam('sysparm_name','checkECCQueueOutput');
		ga.getXML(checkECCQueueOutputCallBackFunction);
	}

}

//Call back function for checkECCQueueOutput
function checkECCQueueOutputCallBackFunction(response) {
	// The server will always return an xml object that you will need to parse. 
	// You can start with the following to figure out what xml you have and then dig into it to pull what you need.
	var answer = response.responseXML.documentElement.getAttribute("answer");
	if (answer < 3) {
		gsftSubmit(null, g_form.getFormElement(), 'test_connection_action'); //MUST call the 'Action name' set in this UI Action	
	}
	else {
		var cancelIt = function(){
			//do nothing
		};
		var doIt = function(){
			//Call the UI Action and skip the 'onclick' function
			gsftSubmit(null, g_form.getFormElement(), 'test_connection_action'); //MUST call the 'Action name' set in this UI Action
		};

		var gdw = new GlideDialogWindow('x_tekso_twxapp01_mid_server_queue_is_busy');
		gdw.setTitle('<h1><strong>MID Server queue is busy...</strong></h1>');
		gdw.setPreference('sysparm_queuesize',answer);
		gdw.setPreference('onCancel', cancelIt.bind(this));
		gdw.setPreference('onContinue', doIt.bind(this));

		// To hide the x in the window
		gdw.removeCloseDecoration();
		gdw.render();	
	}
}

//Server Side Code..........

//Code that runs without 'onclick'
//Ensure call to server-side function with no browser errors
if(typeof window == 'undefined')
   runTestBusRuleCode();

//Server-side function
function runTestBusRuleCode(){

	var setupSysID = current.sys_id;
	
	current.last_button_clicked = 'Test Connection';
	current.connection_test_requested = true; // This will trigger the BR - Setup When Connection Test Req Changes
	current.connection_status = 'Testing Connection - Please Wait';
	
	// This will always be updated
	var gdt = new GlideDateTime();
	current.connection_test_requested_at = gdt.getDisplayValue();
	current.updated_by_script = 'UI Action Test Connection';
	current.update();

	// Script Include
	var si = new x_tekso_twxapp01.UpdateScheduledJob();
	si.updateScheduledJob(setupSysID);
	
	action.setRedirectURL(current);	
}

]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-01-28 13:51:25</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e8b2e136db26085035a38a72399619f6</sys_id>
        <sys_mod_count>141</sys_mod_count>
        <sys_name>Test Connection</sys_name>
        <sys_overrides/>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_ui_action_e8b2e136db26085035a38a72399619f6</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-04-19 17:49:01</sys_updated_on>
        <table>x_tekso_twxapp01_setup</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>test_connection_action</action_name>
        <active>true</active>
        <client>true</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition>gs.hasRole('x_tekso_twxapp01.admin') &amp;&amp; current.start_sending_requested == false &amp;&amp; current.connection_test_requested == false</condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>Test Connection</name>
        <onclick>runTestClientCode()</onclick>
        <order>105</order>
        <script><![CDATA[//Client-side 'onclick' function
function runTestClientCode(){

	var abort = false;
	
	var url = g_form.getValue('ucontrol_url') || '';
	var mid_server = '';
	var canReadMIDServerField = true;
	// Put the mid_server in a try catch block in case the user does not have access to this
	try {
		mid_server = g_form.getDisplayBox('ucontrol_mid_server').value || '';
	}
	catch(err) {
		//alert(err);
		//TypeError: Cannot read property 'value' of undefined
		mid_server = '';
		canReadMIDServerField = false;
	}

	if (url == "") {
		g_form.hideFieldMsg('ucontrol_url');
		g_form.showFieldMsg('ucontrol_url','The field is blank','error');
		abort = true;
	}

	if (canReadMIDServerField == false) {
		g_form.clearMessages();
		g_form.addErrorMessage("Test Connection Action Cannot Be Performed - Cannot access the MID Server table");
		abort = true;
	}

	if (canReadMIDServerField == true && mid_server == "") {
		g_form.hideFieldMsg('ucontrol_mid_server');
		g_form.showFieldMsg('ucontrol_mid_server','The field is blank','error');
		abort = true;
	}	
	
	if (abort == true) {
		return false; //Abort submission		
	}
	
	if (abort == false) {
		// Check that the MID Server is UP
		var ga = new GlideAjax('x_tekso_twxapp01.ClientCheckECCAgent');//this is the script include
		ga.addParam("sysparm_name", "getECCAgentStatus"); //this is the function within the script include
		ga.addParam("sysparm_mid_server_name", mid_server);
		ga.getXML(getECCAgentStatusCallBackFunction);
	}

}

//Call back function for getECCAgentStatus
function getECCAgentStatusCallBackFunction(response) {
	// The server will always return an xml object that you will need to parse. 
	// You can start with the following to figure out what xml you have and then dig into it to pull what you need.	
	var answer = response.responseXML.documentElement.getAttribute("answer");
	if (answer != 'Up') {
		g_form.hideFieldMsg('ucontrol_mid_server');
		g_form.showFieldMsg('ucontrol_mid_server','The MID Server is ' + answer.toString(),'error');
	}
	else {
		// Get the mid server user
		var mid_server_sys_id = g_form.getValue('ucontrol_mid_server');
		var ga2 = new GlideAjax('x_tekso_twxapp01.ClientCheckECCAgent');//this is the script include
		ga2.addParam("sysparm_name", "getECCAgentUser"); //this is the function within the script include
		ga2.addParam("sysparm_mid_server_sys_id", mid_server_sys_id);
		ga2.getXML(getECCAgentUserCallBackFunction);		
	}
}

//Call back function for getECCAgentUser
function getECCAgentUserCallBackFunction(response) {
	var answer = response.responseXML.documentElement.getAttribute("answer");	
	var mid_server_user_name = answer.toString();
	if (mid_server_user_name.length < 1) {
		g_form.hideFieldMsg('ucontrol_mid_server');
		g_form.showFieldMsg('ucontrol_mid_server','Unable to get MID Server user','error');
	}
	else {
		// Check if the midserver user has the role mid_server
		/* No longer need to do this
		This was always a problem anyway as we can't use gs.hasRole on another user account - so have 
		to query the table directly - which is not accurate as that would only find a mattch if the user 
		account had mid_server directly assigned - rather than via admin etc.
				
		var role = 'mid_server';
		var ga3 = new GlideAjax('x_tekso_twxapp01.ClientCheckECCAgent');//this is the script include
		ga3.addParam("sysparm_name", "checkUserHasRole"); //this is the function within the script include
		ga3.addParam("sysparm_mid_server_user", mid_server_user_name);
		ga3.addParam("sysparm_role",role);
		//ga3.getXML(checkUserHasRoleCallBackFunction);	
		ga3.getXML( function (response) { checkUserHasRoleCallBackFunction (response, mid_server_user_name, role); });
		
		*/
		
		//New
		var ga4 = new GlideAjax('x_tekso_twxapp01.ClientCheckScheduledJob');//this is the script include
		ga4.addParam("sysparm_name", "checkAndUpdateScheduledJobRunTypePeriodically"); 
		//this is the function within the script include
		ga4.addParam("sysparm_job_name", "Send Data to uControl");
		var interval = g_form.getValue('ucontrol_polling_interval_minutes');
		var interval2 = parseInt(interval);
		ga4.addParam("sysparm_job_interval_mins",interval2);	
		ga4.getXML(checkAndUpdateScheduledJobRunTypePeriodicallyCallBackFunction);			
	}
}

/* No longer required
//Call back function for checkUserHasRole
function checkUserHasRoleCallBackFunction(response, mid_server_user_name,role) {
	var answer = response.responseXML.documentElement.getAttribute("answer");	
	if (answer.length > 0 && answer == 'yes') {
		
		var ga4 = new GlideAjax('x_tekso_twxapp01.ClientCheckScheduledJob');//this is the script include
		ga4.addParam("sysparm_name", "checkAndUpdateScheduledJobRunTypePeriodically"); 
		//this is the function within the script include
		ga4.addParam("sysparm_job_name", "Send Data to uControl");
		var interval = g_form.getValue('ucontrol_polling_interval_minutes');
		var interval2 = parseInt(interval);
		ga4.addParam("sysparm_job_interval_mins",interval2);	
		ga4.getXML(checkAndUpdateScheduledJobRunTypePeriodicallyJobCallBackFunction);
	}
	else {
		g_form.hideFieldMsg('ucontrol_mid_server');
		g_form.showFieldMsg('ucontrol_mid_server','MID Server user ' + mid_server_user_name + ' does not have the role ' + role,'error');
	}
}
*/

//Call back function for checkAndUpdateScheduledJobRunTypePeriodically
function checkAndUpdateScheduledJobRunTypePeriodicallyCallBackFunction(response) {
	// The server will always return an xml object that you will need to parse. 
	// You can start with the following to figure out what xml you have and then dig into it to pull what you need.
	var answer = response.responseXML.documentElement.getAttribute("answer");
	var answer2 = answer.toString();
	//Examples:
	//Unable to find scheduled job: "Send Data to uControl"
	//ok Updated scheduled job: "Send Data to uControl" set Active: True, Run: Periodically
	//ok Updated scheduled job: "Send Data to uControl" set Repeat Interval: 2
	//ok
	
	if (answer2.substring(0, 2) == 'ok') {
		// Got the scheduled job
		
		// Check the 2nd scheduled job
		var ga5 = new GlideAjax('x_tekso_twxapp01.ClientCheckScheduledJob');//this is the script include
		ga5.addParam("sysparm_name", "checkAndUpdateScheduledJobRunTypePeriodically"); 
		//this is the function within the script include
		ga5.addParam("sysparm_job_name", "Process Responses From uControl");
		ga5.addParam("sysparm_job_interval_mins",1);	
		ga5.getXML(checkAndUpdateScheduledJobRunTypePeriodicallyCallBackFunction2);
	}
	else {
		// Warning
		
		// This is triggered when the ok button is clicked on the UI Page below
		// This code block has to be before the bind - gdw.setPreference('onOK', doIt.bind(this));
		var doIt = function(){
			// Check the 2nd scheduled job
			var ga6 = new GlideAjax('x_tekso_twxapp01.ClientCheckScheduledJob');//this is the script include
			ga6.addParam("sysparm_name", "checkAndUpdateScheduledJobRunTypePeriodically"); 
			//this is the function within the script include
			ga6.addParam("sysparm_job_name", "Process Responses From uControl");
			ga6.addParam("sysparm_job_interval_mins",1);	
			ga6.getXML(checkAndUpdateScheduledJobRunTypePeriodicallyCallBackFunction2);	
		};	
		
		// Display a warning message stating that the job is not running
		// After clicking ok the code will jump to the doIt function above.
		var gdw = new GlideDialogWindow('x_tekso_twxapp01_problem_with_scheduled_job');
		gdw.setTitle('<h1><strong>Problem with scheduled job</strong></h1>');
		gdw.setPreference('sysparm_problem',answer2);
		gdw.setPreference('onOK', doIt.bind(this));

		// To hide the x in the window
		gdw.removeCloseDecoration();
		gdw.render();	
		// Important - No more code after this - otherwise it will continue executing
	}
}

//Call back function for checkAndUpdateScheduledJobRunTypePeriodically - No 2
function checkAndUpdateScheduledJobRunTypePeriodicallyCallBackFunction2(response) {
	// The server will always return an xml object that you will need to parse. 
	// You can start with the following to figure out what xml you have and then dig into it to pull what you need.
	var answer = response.responseXML.documentElement.getAttribute("answer");
	var answer2 = answer.toString();	
	//Examples:
	//Unable to find scheduled job: "Send Data to uControl"
	//ok Updated scheduled job: "Send Data to uControl" set Active: True, Run: Periodically
	//ok Updated scheduled job: "Send Data to uControl" set Repeat Interval: 2
	//ok
	
	if (answer2.substring(0, 2) == 'ok') {
		// Got the scheduled job
		// Check the load on ecc_queue
		var ga7 = new GlideAjax('x_tekso_twxapp01.ClientReadECCQueue');
		ga7.addParam('sysparm_name','checkECCQueueOutput');
		ga7.getXML(checkECCQueueOutputCallBackFunction);
	}
	else {
		// Warning		
		// This is triggered when the ok button is clicked on the UI Page below
		// This code block has to be before the bind - gdw.setPreference('onOK', doIt.bind(this));
		var doIt2 = function(){
			// Check the load on ecc_queue
			var ga8 = new GlideAjax('x_tekso_twxapp01.ClientReadECCQueue');
			ga8.addParam('sysparm_name','checkECCQueueOutput');
			ga8.getXML(checkECCQueueOutputCallBackFunction);
		};	
				
		// Display a warning message stating that the job is not running
		// After clicking ok the code will jump to the doIt function above.
		var gdw2 = new GlideDialogWindow('x_tekso_twxapp01_problem_with_scheduled_job');
		gdw2.setTitle('<h1><strong>Problem with scheduled job</strong></h1>');
		gdw2.setPreference('sysparm_problem',answer2);
		gdw2.setPreference('onOK', doIt2.bind(this));

		// To hide the x in the window
		gdw2.removeCloseDecoration();
		gdw2.render();	
		// Important - No more code after this - otherwise it will continue executing		
	}	
}

//Call back function for checkECCQueueOutput
function checkECCQueueOutputCallBackFunction(response) {
	
	// The server will always return an xml object that you will need to parse. 
	// You can start with the following to figure out what xml you have and then dig into it to pull what you need.
	var answer = response.responseXML.documentElement.getAttribute("answer");
	var answer2 = parseInt(answer);
	
	if (answer2 < 3) {
		gsftSubmit(null, g_form.getFormElement(), 'test_connection_action'); //MUST call the 'Action name' set in this UI Action	
	}
	else {
		var cancelIt3 = function(){
			//do nothing
		};
		var doIt3 = function(){
			//Call the UI Action and skip the 'onclick' function
			gsftSubmit(null, g_form.getFormElement(), 'test_connection_action'); //MUST call the 'Action name' set in this UI Action
		};

		var gdw3 = new GlideDialogWindow('x_tekso_twxapp01_mid_server_queue_is_busy');
		gdw3.setTitle('<h1><strong>MID Server queue is busy...</strong></h1>');
		gdw3.setPreference('sysparm_queuesize',answer2);
		gdw3.setPreference('onCancel', cancelIt3.bind(this));
		gdw3.setPreference('onContinue', doIt3.bind(this));

		// To hide the x in the window
		gdw3.removeCloseDecoration();
		gdw3.render();	
	}
}

//Server Side Code..........

//Code that runs without 'onclick'
//Ensure call to server-side function with no browser errors
if(typeof window == 'undefined')
   runTestBusRuleCode();

//Server-side function
function runTestBusRuleCode(){

	var script = 'UI Action Test Connection';
	
	//This message will be output if property x_tekso_twxapp01.logging.level is 2 or higher	
	new x_tekso_twxapp01.DebugLogging().message(script,2,'UI Action Test Connection - Started');
	
	var interval = current.ucontrol_polling_interval_minutes;
	var interval2 = parseInt(interval);
	
	current.last_button_clicked = 'Test Connection';
	// This will trigger the BR - Setup When Connection Test Req Changes	
	current.connection_test_requested = true; 
	current.connection_status = 'Testing Connection - Please Wait';
	
	// This will always be updated
	var usr = gs.getUserName();
	current.connection_test_requested_by = usr;	
	var gdt = new GlideDateTime();
	current.connection_test_requested_at = gdt.getDisplayValue();
	current.updated_by_script = 'UI Action Test Connection';
	current.update();

	// Script Include	
	// This will ensure that the scheduled job is active, set to running periodically 
	// and also set the repeat interval	
	// (This should have already been handled by the client side)
	var si = new x_tekso_twxapp01.UpdateScheduledJob();
	si.updateScheduledJobByNameMakeRunTypePeriodically('Send Data to uControl',interval2);
	
	var si2 = new x_tekso_twxapp01.UpdateScheduledJob();
	si2.updateScheduledJobByNameMakeRunTypePeriodically('Process Responses From uControl',1);
	
	action.setRedirectURL(current);	

	//This message will be output if property x_tekso_twxapp01.logging.level is 2 or higher
	new x_tekso_twxapp01.DebugLogging().message(script,2,'UI Action Test Connection - Finished');
}

]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-01-28 13:51:25</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e8b2e136db26085035a38a72399619f6</sys_id>
        <sys_mod_count>214</sys_mod_count>
        <sys_name>Test Connection</sys_name>
        <sys_overrides/>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_ui_action_e8b2e136db26085035a38a72399619f6</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-09-14 12:29:57</sys_updated_on>
        <table>x_tekso_twxapp01_setup</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>

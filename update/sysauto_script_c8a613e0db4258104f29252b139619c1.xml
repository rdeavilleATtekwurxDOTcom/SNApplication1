<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>Process Responses From uControl</name>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:01:00</run_period>
        <run_start>2020-07-13 22:09:52</run_start>
        <run_time>1970-01-01 00:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[processResponsesFromuControl();

function processResponsesFromuControl() {

	var script = 'SJ Process Responses From uControl';
	//This message will be output if property x_tekso_twxapp01.logging.level is 1 or higher	
	var msg = script + ' - Started';
	new x_tekso_twxapp01.DebugLogging().message(script,1,msg);
	
	var dataSysID = '';
	
	var ucontrolCnt = 0;
	var updateCnt = 0;
	var deleteCnt = 0;
	var connectCnt = 0;
	var attachmentCnt = 0;
	var responseCnt = 0;
	var sysidCnt = 0;
	var dataProcessed = false;
	
	var jobTable2 = 'x_tekso_twxapp01_scheduled_job2_log';
	var queueTable = 'x_tekso_twxapp01_queue_process_responses_from_ucontrol';
	var queueTable2 = 'x_tekso_twxapp01_queue_process_responses_from_ucontrol2';
	
	var calculatedNextJobStartTime = new GlideDateTime();

	// --Work out when the scheduled job is going to run next -----------------
	// Number of seconds till the next run of the job
	var gdt1 = new GlideDateTime('1970-01-01 00:00:00');
	var gdt2 = new GlideDateTime(current.run_period); //Need to convert current.run_period into a GlideDateTime
	var jobIntervalDuration = GlideDateTime.subtract(gdt1, gdt2);
	var jobIntervalDurationMS = jobIntervalDuration.getNumericValue();
	var jobIntervalDurationSeconds = parseInt(jobIntervalDurationMS/1000);
	
	// Two ways of calculating the next time
	// 1: Get the current time and add on the run_period
	// 2: Get the next_action from sys_trigger -- unfortunately this won't work because it is 
	//    updated after the job ends
	//    The time retrieved is the time of the current run
	calculatedNextJobStartTime.addSeconds(jobIntervalDurationSeconds);
	
	var gr1 = new GlideRecordSecure(jobTable2);
	gr1.initialize();
	gr1.setValue('number_of_responses_for_deletes',0);
	gr1.setValue('number_of_responses_for_updates',0);
	gr1.setValue('number_of_responses_for_connect',0);
	gr1.setValue('number_of_responses_from_ucontrol',0);
	gr1.setValue('number_of_responses_with_attachments',0);
	gr1.setValue('number_of_responses_with_status_code',0);
	gr1.setValue('number_of_responses_with_sys_ids',0);	
	gr1.setValue('next_run_at',calculatedNextJobStartTime);	
	var job2sysID = gr1.insert();
	
	var gr2 = new GlideRecordSecure('ecc_queue');
	gr2.addQuery('queue','input');
	gr2.addQuery('state','ready');
	gr2.orderByDesc('sys_created_on'); //Descending Order
	gr2.query();
	while(gr2.next()) {
		var ecc_queue_sys_id = gr2.getValue('sys_id') || '';
		var source = gr2.getValue('source') || '';
		var source2 = source.toString();
	
		var dtReceived = gr2.getValue('sys_created_on');
		if (source2.length > 0) {
			if (source2.indexOf('uControl') > -1) {
				ucontrolCnt++;
				dataProcessed = true;
				//https://tekucontroldemo3.tekwurx.com/uControl/rest/servicenow/connect
				//https://tekucontroldemo3.tekwurx.com/uControl/rest/servicenow/update/ci
				//https://tekucontroldemo3.tekwurx.com/uControl/rest/servicenow/delete/ci

				var dataType = '';
				if (source2.indexOf('/uControl/rest/servicenow/update/ci') > -1) {
					dataType = 'update';
					updateCnt++;
				}

				if (source2.indexOf('/uControl/rest/servicenow/delete/ci') > -1) {
					dataType = 'delete';
					deleteCnt++;
				}		

				if (source2.indexOf('/uControl/rest/servicenow/connect') > -1) {
					dataType = 'connect';
					connectCnt++;
				}

				if (dataType == 'update' || dataType == 'delete') {
					var agent_correlator = gr2.getValue('agent_correlator') || '';
					var agent_correlator2 = agent_correlator.toString();
					var payload = gr2.getValue('payload');
					var sys_id = gr2.getValue('sys_id');
					var sys_id2 = sys_id.toString();
					// Large payload bodies will create an attachment on the ECC Queue record.
					if(payload == "<see_attachment/>"){		
						payload = getPayloadAttachment(sys_id2);
						attachmentCnt++;
					}

					var gotResponse = false;
					var gotDataSysID = false;			
					var xmlDoc = new XMLDocument2();
					xmlDoc.parseXML(payload.toString());
					var response = xmlDoc.getNodeText('//result/output');
					//{"result":{"statusCode":200,"statusMsg":"OK"}}

					if (response.indexOf('result') >= 0 && response.indexOf('statusCode') >= 0) {		
						gotResponse = true;
						responseCnt++;
						/*
						var parser = new global.JSON();
						var jsonBack = parser.decode(response);	
						var resultStatusCode = parseInt(jsonBack.result.statusCode);
						var resultStatusMsg = jsonBack.result.statusMsg;	
						*/
					}

					if (agent_correlator2.length > 0) {
						dataSysID = tryToFindUsingMIDServerAgentCorrelator(agent_correlator2);
						if (dataSysID.length > 0) {
							gotDataSysID = true;
							sysidCnt++;
							msg = script + ' - Matched Using Agent Correlator';
							new x_tekso_twxapp01.DebugLogging().message(script,3,msg);								
						}
					}
					
					if (gotDataSysID == false) {
						//Unable to match via agent correlator so need to read through the data
						var node = xmlDoc.getNode("//parameters");
						var childNodes = node.getChildNodeIterator();

						while(childNodes.hasNext() && gotDataSysID == false && gotResponse == true){
							var n = childNodes.next();
							var nStr = n.toString();
							if (nStr.indexOf('parameter') >= 0 && nStr.indexOf('content') > 0 && nStr.indexOf('data_sys_id') > 0) {
								/*
					<parameter name="content" value="{&quot;operation&quot;:&quot;delete&quot;,&quot;base_table&quot;:&quot;cmdb_ci&quot;,&quot;source&quot;:&quot;ServiceNow&quot;,&quot;source_name&quot;:&quot;ven03409&quot;,&quot;source_url&quot;:&quot;https://ven03409.service-now.com/&quot;,&quot;data_sys_id&quot;:&quot;cf99416cdb5c5c104f29252b13961912&quot;,&quot;deletedData&quot;: [{&quot;sys_updated_on&quot;:&quot;2020-04-15 15:20:06&quot;,&quot;sys_class_name&quot;:&quot;cmdb_ci_appl&quot;,&quot;sys_updated_by&quot;:&quot;robin&quot;,&quot;sys_id&quot;:&quot;126be3bddb8814104f29252b13961940&quot;},{&quot;sys_updated_on&quot;:&quot;2020-04-15 15:20:06&quot;,&quot;sys_class_name&quot;:&quot;cmdb_ci_appl&quot;,&quot;sys_updated_by&quot;:&quot;robin&quot;,&quot;sys_id&quot;:&quot;126be3bddb8814104f29252b13961946&quot;}]}"/>
								*/

								var unescaped = nStr.replace(/&quot;/g,'');
								var pos = unescaped.indexOf('data_sys_id:');
								pos = pos + 12; // length of 'data_sys_id:'	
								dataSysID = unescaped.substring(pos,pos+32);
								gotDataSysID = true;
								sysidCnt++;
								/*
								var pos2 = unescaped.indexOf('data_record_no:');
								pos2 = pos2 + 15;
								var recordNo = unescaped.substring(pos2,pos2+20);
								var recordNo2 = getCharactersBeforeDelimiter(recordNo,',');	
								*/
							} // if (nStr.indexOf('parameter') >= 0
						} // while(childNodes.hasNext()
					}
					
					if (gotDataSysID == true && gotResponse == true) {
						updateECCQueue(ecc_queue_sys_id);
						
						var gr3 = new GlideRecordSecure(queueTable);
						gr3.initialize();
						gr3.setValue('rest_data_record_sys_id',dataSysID);
						gr3.setValue('response_received_at',dtReceived);
						gr3.setValue('response_from_ucontrol',response);
						gr3.setValue('ecc_queue_record_sys_id',ecc_queue_sys_id);
						gr3.setValue('scheduled_job2_log_record_sys_id',job2sysID);
						gr3.insert();						

						//This will update the fields:
						//background_job_handlerestresponse_started_at							 
						//number_of_cmdb_records_updated
						//number_of_times_handlerestresponse_called
						//number_of_rest_records_matched
						//background_job_handlerestresponse_finished_at													
						
					} // if (gotDataSysID == true) {
				} // if (dataType == 'update' || dataType == 'delete') {
				if (dataType == 'connect') {
					updateECCQueue(ecc_queue_sys_id);			
				} //if (dataType == 'connect') {
			} // if (source.indexOf('uControl') > -1) {
		} // if (source2.length > 0) {
	} // while(gr2.next()) {
	
	checkfortimeoutexpired(job2sysID);
	
	// Will trigger Async BR - Queue Check For Timeout Expired - Async	
	var gr4 = new GlideRecordSecure(jobTable2);
	gr4.addQuery('sys_id',job2sysID);
	gr4.query();
	if (gr4.next()) {
		gr4.setValue('number_of_responses_from_ucontrol',ucontrolCnt);
		gr4.setValue('number_of_responses_for_deletes',deleteCnt);
		gr4.setValue('number_of_responses_for_updates',updateCnt);
		gr4.setValue('number_of_responses_for_connect',connectCnt);
		gr4.setValue('number_of_responses_with_attachments',attachmentCnt);
		gr4.setValue('number_of_responses_with_status_code',responseCnt);
		gr4.setValue('number_of_responses_with_sys_ids',sysidCnt);	
		gr4.setValue('data_processed',dataProcessed); // Set to true if something has happened
		var finishedAt = new GlideDateTime();	
		gr4.setValue('finished_at',finishedAt);
		gr4.update();
	}

	//To run at the end - once
	var gr5 = new GlideRecordSecure(queueTable2);
	gr5.initialize();
	gr5.setValue('scheduled_job2_log_record_sys_id',job2sysID);	
	gr5.insert();						
	// Will trigger Async BR - Queue Process Responses2 - Async
	
	//This message will be output if property x_tekso_twxapp01.logging.level is 1 or higher		
	msg = script + ' - Finished';
	new x_tekso_twxapp01.DebugLogging().message(script,1,msg);	
}


function tryToFindUsingMIDServerAgentCorrelator(midServerAgentCorrelator) {

	var rtn = '';
	var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';	
		
	var midServerAgentCorrelator2 = midServerAgentCorrelator.toString();
	if (midServerAgentCorrelator2.length > 0) {
		var gr1 = new GlideRecordSecure(dataTable); //x_tekso_twxapp01_rest_data_to_ucontrol
		gr1.addQuery('mid_server_agent_correlator',midServerAgentCorrelator2);
		gr1.query();
		if (gr1.next()) {
			var data_sys_id = gr1.getValue('sys_id');
			rtn = data_sys_id.toString();
		}
	}
	return rtn;
}
				
function getPayloadAttachment(sys_id) {
	var payload = '';
	var sys_id2 = sys_id.toString();
	if (sys_id2.length > 0) {
		var gr1 = new GlideRecordSecure("sys_attachment");
		gr1.addQuery( "table_name", "=", "ecc_queue");
		gr1.addQuery( "table_sys_id", "=" , sys_id2);
		gr1.query();
		if (gr1.next()) {
			var sa = new GlideSysAttachment();
			payload = sa.getContent(gr1);
		}
	}
	return payload;
}

function checkfortimeoutexpired(job2sysID) {
	var job2sysID2 = job2sysID.toString();
	if (job2sysID2.length > 0) {
		var queueTable = 'x_tekso_twxapp01_queue_check_for_timeout_expired';
		var gr1 = new GlideRecordSecure(queueTable);
		gr1.initialize();
		gr1.setValue('scheduled_job2_log_record_sys_id',job2sysID2);
		gr1.insert();
		// Will trigger Async BR - Queue Check For Timeout Expired - Async
		
		//This will update the fields:
		//background_job_checkfortimeout_started_at
		//number_of_cmdb_records_timeout_expired
		//number_of_rest_records_timeout_expired
		//background_job_checkfortimeout_finished_at				
	}
}

// Set to processed
function updateECCQueue(sys_id) {
	var sys_id2 = sys_id.toString();
	if (sys_id2.length > 0) {
		var gr1 = new GlideRecordSecure('ecc_queue');
		gr1.addQuery('sys_id',sys_id);
		gr1.addQuery('queue','input');
		gr1.addQuery('state','ready');
		gr1.orderByDesc('sys_created_on'); //Descending Order
		gr1.query();
		if (gr1.next()) {
			gr1.setWorkflow(false);
			gr1.setValue('state','processed');
			gr1.update();				
		}
	}
}


]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-07-13 22:14:49</sys_created_on>
        <sys_id>c8a613e0db4258104f29252b139619c1</sys_id>
        <sys_mod_count>139</sys_mod_count>
        <sys_name>Process Responses From uControl</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sysauto_script_c8a613e0db4258104f29252b139619c1</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-07-31 11:49:00</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>

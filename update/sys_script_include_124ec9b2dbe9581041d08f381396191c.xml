<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.ConnectionTestTimeout</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ConnectionTestTimeout</name>
        <script><![CDATA[/* Example calling
var si = new x_tekso_twxapp01.ConnectionTestTimeout();
si.setConnectionTestRecordTimeoutExpiredIfOverdue(connTestSysID,setupSysID,timedOutBy);

*/
	
var ConnectionTestTimeout = Class.create();
ConnectionTestTimeout.prototype = {
    initialize: function() {
    },
	
	cleanup_old_incomplete_connection_test_records: function() {
		//This message will be output if property x_tekso_twxapp01.logging.level is 2 or higher	
		var script = 'SI ConnectionTestTimeout cleanup_old_incomplete_connection_test_record';	
		var msg = script + ' - Started';
		new x_tekso_twxapp01.DebugLogging().message(script,2,msg);	
		
		// Cleanup job to go through all records
		var connectionTestTable = 'x_tekso_twxapp01_connection_test';
		var setupTable = 'x_tekso_twxapp01_setup';	
		var gr1 = new GlideRecordSecure(setupTable);
		var timedOutBy = 'SI ConnectionTestTimeout cleanup';
		gr1.query();
		if (gr1.next()) {
			//Got the Setup record
			var setupSysID = gr1.getValue('sys_id') || '';
			var setupSysID2 = setupSysID.toString();
			var gr2 = new GlideRecordSecure(connectionTestTable);
			gr2.addQuery('status','Sent');
			gr2.query();
			while(gr2.next()) {
				var connTestSysID = gr2.getValue('sys_id') || '';
				var connTestSysID2 = connTestSysID.toString();
				if (connTestSysID2.length > 0) {
					this.setConnectionTestRecordTimeoutExpiredIfOverdue(connTestSysID2,setupSysID2,timedOutBy);
				}
			}
		}	
		msg = script + ' - Finished';
		new x_tekso_twxapp01.DebugLogging().message(script,2,msg);			
	},
	
	//Called by cleanup which is called by SJ and 
	//ClientConnectionTestTimeout.clientCheckForTimeout - which is called by UI Page
	setConnectionTestRecordTimeoutExpiredIfOverdue: function(connTestSysID,setupSysID,timedOutBy) {	
		var connTestSysID2 = connTestSysID.toString();
		var setupSysID2 = setupSysID.toString();
		var script = 'SI ConnectionTestTimeout';
	
		if (connTestSysID2.length > 0 && setupSysID2.length > 0) {		
			var connectionTestTable = 'x_tekso_twxapp01_connection_test';
			var gr1 = new GlideRecordSecure(connectionTestTable);
			gr1.addQuery('sys_id',connTestSysID2);
			gr1.addQuery('status','Sent'); // Limit to Sent
			gr1.query();
			if (gr1.next()) {
				var timedOutStatus = gr1.getValue('timeout_expired') || false;
				var abortedStatus = gr1.getValue('aborted') || false;		
				// This may have already been aborted or timed out
				if (abortedStatus == true) {
					// Because of timing between various async threads the status may not have 
					// been set to Aborted
					// or it was set to Aborted but then overwritten by another process
					// Hence the need for a separated Aborted flag
					// If Status is not Aborted - set it now			
					gr1.setValue('status','Aborted');	
					gr1.setValue('updated_by_script',script);	// Debug
					gr1.update();
				}

				if (timedOutStatus == true) {
					// Because of timing between various async threads the status may not have 
					// been set to Timeout Expired
					// or it was set to Timeout Expired but then overwritten by another process
					// Hence the need for a separated Timeout Expired flag
					// If Status is not Timeout Expired - set it now			
					gr1.setValue('status','Timeout Expired');	
					gr1.setValue('updated_by_script',script);	// Debug			
					gr1.update();
				}
				
				if (abortedStatus == false && timedOutStatus == false) {
					// Check for timeout
					var requestWillTimeOutAtHasValue = gr1.getValue('timeout_has_been_calculated') || false;
					var requestWillTimeOutAt = gr1.getValue('timeout_will_occur_at');
					var requestWillTimeOutAt2 = new GlideDateTime(requestWillTimeOutAt);
					if (requestWillTimeOutAtHasValue == true) {
						var inPast = this.dateTimeIsInThePast(requestWillTimeOutAt2);
						if (inPast == true) {
							// Timeout has occurred
							var now = new GlideDateTime();
							gr1.setValue('status','Timeout Expired');
							gr1.setValue('timeout_triggered_by',timedOutBy);
							gr1.setValue('timeout_triggered_at',now);							
							gr1.setValue('timeout_expired',true);
							gr1.setValue('updated_by_script',script); // Debug
							gr1.update();	
							//Update Setup
							this.updateSetupIfItContainsTheConnectionTest(setupSysID2,connTestSysID2,script);
						} //if (inPast == true) {
					} // if (requestWillTimeOutAtHasValue == true) {
				} //if (abortedStatus == false && timedOutStatus == false) {	
			} //if (gr1.next()) {			
		} //if (connTestSysID2.length > 0 && setupSysID2.length > 0) {
	},
	
	//Called by Queue Connection Test Timeout - Async
	setConnectionTestRecordTimeoutExpiredAndUpdateSetup: function(setupSysID,connectionTestSysID,script) {	
		var testTable = 'x_tekso_twxapp01_connection_test';
		var connectionTestSysID2 = connectionTestSysID.toString();
		var setupSysID2 = setupSysID.toString();

		if (connectionTestSysID2.length > 0) {	
			var gr1 = new GlideRecordSecure(testTable);
			gr1.addQuery('sys_id',connectionTestSysID2);
			gr1.addQuery('status','Sent'); // Only if Sent
			gr1.query();
			if (gr1.next()) {					
				var now = new GlideDateTime();
				gr1.setValue('status','Timeout Expired');
				gr1.setValue('timeout_expired',true);		
				gr1.setValue('timeout_triggered_by',script);
				gr1.setValue('timeout_triggered_at',now);							
				gr1.setValue('updated_by_script',script); // Debug
				gr1.update();
				
				if (setupSysID2.length > 0) {
					this.updateSetupIfItContainsTheConnectionTest(setupSysID2,connectionTestSysID2,script);
				}
			}
		}
	},

	//called by setConnectionTestRecordTimeoutExpiredAndUpdateSetup
	//and setConnectionTestRecordTimeoutExpiredIfOverdue
	updateSetupIfItContainsTheConnectionTest: function(setupSysID,connTestSysID,script) {
		var setupTable = 'x_tekso_twxapp01_setup';				
		var connTestSysID2 = connTestSysID.toString();
		var setupSysID2 = setupSysID.toString();
		
		if (setupSysID2.length > 0 && connTestSysID2.length > 0) {
			var gr1 = new GlideRecordSecure(setupTable);
			gr1.addQuery('sys_id',setupSysID2);
			//When a connection test is generated the sys_id of the connection test is 
			//linked back to the Setup Record
			//I.e. Setup has a link to the latest connection test
			//We should only be updating Setup if the Connection Test that has Timeout Expired
			//Only if this test connection record is the one that is currently 
			//linked to Setup
			//I.e. only update Setup if connection_test_link = sysID
			gr1.addQuery('connection_test_link',connTestSysID2);
			gr1.query();
			if (gr1.next()) {
				var gdt = new GlideDateTime();
				gr1.setValue('connection_status','Failed');				
				gr1.setValue('connection_status_details','Connection Test Timed Out At: ' + gdt); 
				gr1.setValue('start_sending_requested',false);
				gr1.setValue('connection_test_requested',false);
				gr1.setValue('connection_test_link','');
				gr1.setValue('updated_by_script',script); // Debug
				gr1.update();
			} // if (gr1.next())
		}
	},

	dateTimeIsInTheFuture: function(timeoutAt) {
		//Returns true if the date is in the future
		
		var rtn = false;
		var now = new GlideDateTime();
		var dur1secs2 = this.numberOfSecondsBetweenTwoDates(now,timeoutAt);	
		//If -ve then this means that timeoutAt is < now
		//i.e. the date is in the past	
		//If +ve then this means that timeoutAt is > now
		//i.e. the date is in the future
		if (dur1secs2 > 0) {
			rtn = true;
		}	
		return rtn;
	},

	numberOfSecondsBetweenTwoDates: function(dt1,dt2) {
		//dt1 - dt2
		var dur1 = new GlideDuration();
		dur1 = GlideDateTime.subtract(dt1,dt2); // In Milliseconds	
		var dur1ms = dur1.getNumericValue();
		var dur1secs = dur1ms / 1000;
		var dur1secs2 = parseInt(dur1secs);

		// If there is less than 1000 ms between the dates
		// then round this up to 1 second
		if (dur1ms > 0 && dur1ms < 1000) {
			dur1secs2 = 1;
		}
		//If -ve then this means that dt2 is < dt1
		//If +ve then this meaas that dt2 is > dt1
		return dur1secs2;
	},
	
	dateTimeIsInThePast: function(timeoutAt) {
		// Returns true of the date is in the past
		
		var rtn = false;
		var now = new GlideDateTime();

		var dur1secs2 = this.numberOfSecondsBetweenTwoDates(now,timeoutAt);	
		//If -ve then this means that dt2 is < dt1
		//If +ve then this menas that dt2 is > dt1
		
		//If -ve then this means that timeoutAt is < now
		//i.e. the date is in the past	
		//If +ve then this means that timeoutAt is > now
		//i.e. the date is in the future
		if (dur1secs2 < 0) {
			rtn = true;
		}
		return rtn;
	},


    type: 'ConnectionTestTimeout'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-06-25 15:33:46</sys_created_on>
        <sys_id>124ec9b2dbe9581041d08f381396191c</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>ConnectionTestTimeout</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_124ec9b2dbe9581041d08f381396191c</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-07-24 09:02:48</sys_updated_on>
    </sys_script_include>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.ClientConnectionTestTimeout</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ClientConnectionTestTimeout</name>
        <script><![CDATA[var ClientConnectionTestTimeout = Class.create();
ClientConnectionTestTimeout.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	checkForTimeout: function() {
		
		// sysID from sysparm_sys_id
		var sysID = this.getParameter('sysparm_sys_id');
		var setupTable = 'x_tekso_twxapp01_setup';
		var gr1 = new GlideRecordSecure(setupTable);
		gr1.addQuery('sys_id',sysID);
		gr1.query();
		if (gr1.next()) {
			var connectionTestLink = gr1.getValue('connection_test_link') || '';
			var connectionTestLink2 = connectionTestLink.toString();		
			if (connectionTestLink2.length > 0) {
				var tstTable = 'x_tekso_twxapp01_connection_test';
				var gr2 = new GlideRecordSecure(tstTable);
				gr2.addQuery('sys_id',connectionTestLink2);
				gr2.query();
				if (gr2.next()) {
					// Got the connection test record linked to setup
					var now = new GlideDateTime();
					var requestWillTimeOutAt = new GlideDateTime(gr2.getValue('request_will_time_out_at'));
					var dur1 = new GlideDuration();
					dur1 = GlideDateTime.subtract(now,requestWillTimeOutAt);// In Milliseconds
					var dur1secs = dur1.getNumericValue() / 1000; 
					var dur1secs2 = parseInt(dur1secs); 
					//If -ve then this means that requestWillTimeOutAt is earlier than now
					//i.e. the date is in the past
					if (dur1secs2 < 0) {
						// This is the same code as in -- Script Action - TestConnectionTimeOut
						// Timeout has occurred
						var status = gr2.getValue('status') || '';
						var timedOutStatus = gr2.getValue('timed_out') || false;
						var abortedStatus = gr2.getValue('aborted') || false;	
					
						// This may have already been aborted or timed out

						if (abortedStatus == true && status != 'Aborted') {
							// Because of timing between various async threads the status may not have been set to Aborted
							// or it was set to Aborted but then overwritten by another process
							// Hence the need for a separated Aborted flag
							// If Status is not Aborted - set it now			
							gr2.setValue('status','Aborted');	
							gr2.setValue('updated_by_script','SI ClientConnectionTestTimeout');	// Debug
							gr2.update();
						}

						if (timedOutStatus == true && status != 'Timed Out') {
							// Because of timing between various async threads the status may not have been set to Timed Out
							// or it was set to Timed Out but then overwritten by another process
							// Hence the need for a separated Timed Out flag
							// If Status is not Timed Out - set it now			
							gr2.setValue('status','Timed Out');	
							gr2.setValue('updated_by_script','SI ClientConnectionTestTimeout');	// Debug			
							gr2.update();
						}
						
						if (abortedStatus == false && timedOutStatus == false) {
							// Not alredy aborted
							if (status == 'Pending' || status == 'Sent') {		
								gr2.setValue('status','Timed Out');
								gr2.setValue('timed_out',true);
								gr2.setValue('updated_by_script','SI ClientConnectionTestTimeout');	// Debug
								gr2.update();
								
								var gr3 = new GlideRecordSecure(setupTable);
								gr3.addQuery('sys_id',sysID);
								//When a connection test is generated the sys_id of the connection test is 
								//linked back to the Setup Record
								//I.e. Setup has a link to the latest connection test
								//We should only be updating Setup if the Connection Test that has Timed Out
								//Only if this test connection record is the one that is currently linked to Setup
								//I.e. only update Setup if connection_test_link = sysID
								gr3.addQuery('connection_test_link',connectionTestLink2);
								gr3.query();
								if (gr3.next()) {
									var gdt = new GlideDateTime();
									gr3.setValue('connection_status','Failed');				
									gr3.setValue('connection_status_details','Connection Test Timed Out At: ' + gdt); 
									// .getDisplayValue()
									gr3.setValue('start_sending_requested',false);
									gr3.setValue('connection_test_requested',false);
									gr3.setValue('connection_test_link','');
									gr3.setValue('updated_by_script','Script Action TestConnectionTimeOut'); // Debug
									gr3.update();
								} // if (gr3.next())								
							} //if (status == 'Pending' || status == 'Sent') {	
						} //if (abortedStatus == false && timedOutStatus == false) {
					}
				} // if (gr2.next()) {
			} // if (connectionTestLink2.length > 0) {		
		} // if (gr1.next())
	},
	
    type: 'ClientConnectionTestTimeout'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-06-24 17:37:53</sys_created_on>
        <sys_id>976cd0eadba9181041d08f381396192e</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>ClientConnectionTestTimeout</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_976cd0eadba9181041d08f381396192e</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-06-24 21:26:15</sys_updated_on>
    </sys_script_include>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tekso_twxapp01.TimeoutExpired</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TimeoutExpired</name>
        <script><![CDATA[// new x_tekso_twxapp01.TimeoutExpired().checkForDataTimeout();
// Called by SJ Process Responses From uControl

var TimeoutExpired = Class.create();
TimeoutExpired.prototype = {
    initialize: function() {
    },

	fixAnyRecordsWithNoTimeOut: function() {
		// In theory this should never happen
		// But will ensure that a timeout date is set
		var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';	
		var trackingTable = 'x_tekso_twxapp01_cmdb_changes';
		var linkTable = 'x_tekso_twxapp01_cmdb_link_to_rest_data';
		
		var gr1 = new GlideRecordSecure(dataTable);		
		gr1.addQuery('sent_to_ucontrol',true);
		gr1.addQuery('timeout_expired',false);
		gr1.addQuery('response_received',false);
		gr1.addQuery('timeout_has_been_calculated',false);	
		gr1.query();
		while(gr1.next()) {
			var data_sys_id = gr1.getValue('sys_id') || '';
			var data_sys_id2 = data_sys_id.toString();
			
			var timeoutMins = gr1.getValue('ucontrol_connection_timeout_minutes') || 0;		
			if (timeoutMins == 0) {
				//Default to 3 mins if no timeout
				timeoutMins = 3;
			}
			
			var timeOutAt = new GlideDateTime();
			var timeoutSeconds = timeoutMins * 60;
			timeOutAt.addSeconds(timeoutSeconds);
			
			gr1.setValue('sending_will_timeout_at',timeOutAt);
			gr1.setValue('timeout_has_been_calculated',true);	
			gr1.update();
			
			if (data_sys_id2.length > 0) {
				var gr2 = new GlideRecordSecure(linkTable); //x_tekso_twxapp01_cmdb_link_to_rest_data
				gr2.addQuery('link_to_rest_data_record',data_sys_id2);
				gr2.query();
				while(gr2.next()) {
					gr2.setValue('sending_will_timeout_at',timeOutAt);
					gr2.update();
					
					var link_sys_id = gr2.getValue('sys_id') || '';
					var link_sys_id2 = link_sys_id.toString();
					var cmdb_changes_sys_id = gr2.getValue('link_to_processing_record');
					var cmdb_changes_sys_id2 = cmdb_changes_sys_id.toString();
					if (cmdb_changes_sys_id2.length > 0 && link_sys_id2.length > 0) {
						var gr3 = new GlideRecordSecure(trackingTable); //x_tekso_twxapp01_cmdb_changes
						gr3.addQuery('sys_id',cmdb_changes_sys_id2);
						// Only update cmdb_changes IF this is the latest data
						gr3.addQuery('link_to_latest_rest_response_record',link_sys_id2);
						gr3.query();
						while(gr3.next()) {
							gr3.setValue('sending_will_timeout_at',timeOutAt);
							gr3.update();
						}
					} //if (cmdb_changes_sys_id2.length > 0) {
				} //while(gr2.next()) {
			} //if (data_sys_id2.length > 0) {
		} //while(gr1.next()) {
	},
	
	isRecordInIboundQueue: function(sys_id){
		var rtn = false;
		var queueTable = 'x_tekso_twxapp01_queue_process_responses_from_ucontrol';		
		var sys_id2 = sys_id.toString();
		if (sys_id2.length > 0) {
			var gr1 = new GlideRecordSecure(queueTable);
			gr1.addQuery('rest_data_record_sys_id',sys_id2);
			gr1.query();
			if (gr1.next()) {
				rtn = true;
			}
		}
		
		return rtn;
	},
	
	checkForDataTimeout: function(job2sysid) { 
		
		// job2sysid = sys_id for x_tekso_twxapp01_scheduled_job2_log
		// Log file for the scheduled job Process Responses From uControl

		var jobTable2 = 'x_tekso_twxapp01_scheduled_job2_log';		
		var dataTable = 'x_tekso_twxapp01_rest_data_to_ucontrol';
		
		var timeoutBy = 'SI Timeout Expired';
		var timeoutAt = new GlideDateTime();

		// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
		var cmdbChangesTimeoutCnt = 0;
		
		// Number of x_tekso_twxapp01_rest_data_to_ucontrol records that have timeout expired
		var restRecordTimeoutCnt = 0;
		
		this.fixAnyRecordsWithNoTimeOut();
		
		var gr1 = new GlideRecordSecure(dataTable);
		gr1.addQuery('sent_to_ucontrol',true);
		gr1.addQuery('timeout_expired',false);
		gr1.addQuery('response_received',false);
		gr1.addQuery('timeout_has_been_calculated',true);
		gr1.addQuery('sending_will_timeout_at','<',timeoutAt);
		gr1.query();
		while(gr1.next()) {
			var sys_id = gr1.getValue('sys_id') || '';
			
			var inQueue = this.isRecordInIboundQueue(sys_id);
			
			if (inQueue == false) {
				
				restRecordTimeoutCnt++;

				var action = gr1.getValue('action');
				var noOfRecords = gr1.getValue('no_of_cmdb_records_in_json_request_body') || 0;
				var noOfRecords2 = parseInt(noOfRecords);

				gr1.setValue('timeout_expired',true);
				gr1.setValue('timeout_triggered_by',timeoutBy);	
				gr1.setValue('timeout_triggered_at',timeoutAt);	
				gr1.update();

				var sys_id2 = sys_id.toString();
				if (sys_id2.length > 0) {
					var cmdbChangesTimeoutCnt2 = this.linkTableTimeout(sys_id2,timeoutBy,timeoutAt);	
					// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
					cmdbChangesTimeoutCnt = cmdbChangesTimeoutCnt + cmdbChangesTimeoutCnt2;
				}
				var link_to_processing_log_record = gr1.getValue('link_to_processing_log_record') || '';
				var link_to_processing_log_record2 = link_to_processing_log_record.toString();
				if (link_to_processing_log_record2.length > 0) {
					this.logTableTimeout(link_to_processing_log_record2,timeoutBy,timeoutAt,action,noOfRecords2);	
				}

				var link_to_scheduled_job_log_record = gr1.getValue('link_to_scheduled_job_log_record') || '';
				var link_to_scheduled_job_log_record2 = link_to_scheduled_job_log_record.toString();
				if (link_to_scheduled_job_log_record2.length > 0) {
					this.jobTableTimeout(link_to_scheduled_job_log_record2,timeoutBy,timeoutAt,action,noOfRecords2);
				}
				
			} // if (inQueue == false) {
		} //while(gr1.next())

		// job2sysid = sys_id for x_tekso_twxapp01_scheduled_job2_log
		// Log file for the scheduled job Process Responses From uControl
		var job2sysid2 = job2sysid.toString();
		if (job2sysid2.length > 0) {
			var gr2 = new GlideRecordSecure(jobTable2);
			gr2.addQuery('sys_id',job2sysid2);
			gr2.query();
			if (gr2.next()) {
				var finishedAt = new GlideDateTime();
				gr2.setValue('background_job_checkfortimeout_started_at',timeoutAt);
				gr2.setValue('number_of_cmdb_records_timeout_expired',cmdbChangesTimeoutCnt);
				gr2.setValue('number_of_rest_records_timeout_expired',restRecordTimeoutCnt);
				gr2.setValue('background_job_checkfortimeout_finished_at',finishedAt);		
				if (cmdbChangesTimeoutCnt > 0 || restRecordTimeoutCnt > 0) {
					gr2.setValue('data_processed',true);				
				}
				gr2.update();
			}
		}
	},

	logTableTimeout: function(sys_id,timeoutBy,timeoutAt,action,noOfRecords) {
		var logTable = 'x_tekso_twxapp01_processing_log';	
		var sys_id2 = sys_id.toString();
		var action2 = action.toString();
		var noOfRecords2 = parseInt(noOfRecords);

		if (sys_id2.length > 0 && action2.length > 0 && noOfRecords2 > 0) {
			var gr1 = new GlideRecordSecure(logTable);
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();
			while(gr1.next()) {

				var processedRecCnt = gr1.getValue('total_number_of_records_processed') || 0;
				var processedDelCnt = gr1.getValue('number_of_deletes_processed') || 0;
				var processedUpdCnt = gr1.getValue('number_of_updates_processed') || 0;
				
				var recCnt = gr1.getValue('total_number_of_records_timeout_expired') || 0;
				var delCnt = gr1.getValue('number_of_deletes_timeout_expired') || 0;
				var updCnt = gr1.getValue('number_of_updates_timeout_expired') || 0;
				var recCnt2 = parseInt(recCnt);
				var delCnt2 = parseInt(delCnt);
				var updCnt2 = parseInt(updCnt);

				var processedRecCnt2 = parseInt(processedRecCnt);
				var processedDelCnt2 = parseInt(processedDelCnt);
				var processedUpdCnt2 = parseInt(processedUpdCnt);
				
				recCnt2 = recCnt2 + noOfRecords2;
				if (action2 == 'delete') {
					delCnt2 = delCnt2 + noOfRecords2;
				}
				if (action2 == 'update') {
					updCnt2 = updCnt2 + noOfRecords2;
				}

				var summary = '';
				var pSummary = this.processSummary(processedRecCnt2,processedUpdCnt2,processedDelCnt2);
				var tSummary = 	this.timeoutExpiredSummary(recCnt2,updCnt2,delCnt2);		
				var total = recCnt2 + processedRecCnt2;
				if (total == 1) {
					summary = total.toString() + ' record, ' + pSummary + ', ' + tSummary;
				}
				else {		
					summary = total.toString() + ' records, ' + pSummary + ', ' + tSummary;		
				}
				
				gr1.setValue('number_of_updates_timeout_expired',updCnt2);
				gr1.setValue('number_of_deletes_timeout_expired',delCnt2);
				gr1.setValue('total_number_of_records_timeout_expired',recCnt2);
				gr1.setValue('processing_summary',summary);				
				gr1.setValue('timeout_expired',true);
				gr1.setValue('processing_completed_at',timeoutAt);
				gr1.setValue('updated_by_script',timeoutBy); // Debug	
				gr1.update();
			}
		}
	},

	
	// Scheduled job log for the processing record
	jobTableTimeout: function(sys_id,timeoutBy,timeoutAt,action,noOfRecords) {
		var jobTable = 'x_tekso_twxapp01_scheduled_job_log';	
		var sys_id2 = sys_id.toString();
		var action2 = action.toString();
		var noOfRecords2 = parseInt(noOfRecords);

		if (sys_id2.length > 0 && action2.length > 0 && noOfRecords2 > 0) {	
			var gr1 = new GlideRecordSecure(jobTable);
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();
			while(gr1.next()) {
				var processedRecCnt = gr1.getValue('total_number_of_records_processed') || 0;
				var processedDelCnt = gr1.getValue('number_of_deletes_processed') || 0;
				var processedUpdCnt = gr1.getValue('number_of_updates_processed') || 0;
				
				var recCnt = gr1.getValue('total_number_of_records_timeout_expired') || 0;
				var delCnt = gr1.getValue('number_of_deletes_timeout_expired') || 0;
				var updCnt = gr1.getValue('number_of_updates_timeout_expired') || 0;
				var recCnt2 = parseInt(recCnt);
				var delCnt2 = parseInt(delCnt);
				var updCnt2 = parseInt(updCnt);

				var processedRecCnt2 = parseInt(processedRecCnt);
				var processedDelCnt2 = parseInt(processedDelCnt);
				var processedUpdCnt2 = parseInt(processedUpdCnt);
				
				recCnt2 = recCnt2 + noOfRecords2;
				if (action2 == 'delete') {
					delCnt2 = delCnt2 + noOfRecords2;
				}
				if (action2 == 'update') {
					updCnt2 = updCnt2 + noOfRecords2;
				}

				var summary = '';
				var pSummary = this.processSummary(processedRecCnt2,processedUpdCnt2,processedDelCnt2);
				var tSummary = 	this.timeoutExpiredSummary(recCnt2,updCnt2,delCnt2);		
				var total = recCnt2 + processedRecCnt2;
				if (total == 1) {
					summary = total.toString() + ' record, ' + pSummary + ', ' + tSummary;
				}
				else {		
					summary = total.toString() + ' records, ' + pSummary + ', ' + tSummary;		
				}
				
				gr1.setValue('number_of_updates_timeout_expired',updCnt2);
				gr1.setValue('number_of_deletes_timeout_expired',delCnt2);
				gr1.setValue('total_number_of_records_timeout_expired',recCnt2);
				gr1.setValue('processing_summary',summary);				
				gr1.setValue('timeout_expired',true);
				gr1.setValue('processing_completed_at',timeoutAt);
				gr1.setValue('updated_by_script',timeoutBy); // Debug	
				gr1.update();
			}
		}
	},

	linkTableTimeout: function(sys_id,timeoutBy,timeoutAt) {
		var linkTable = 'x_tekso_twxapp01_cmdb_link_to_rest_data';	
		
		// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
		var cmdbChangesTimeoutCnt = 0;
		var sys_id2 = sys_id.toString();
		if (sys_id2.length > 0) {	
			var gr1 = new GlideRecordSecure(linkTable);
			gr1.addQuery('link_to_rest_data_record',sys_id2);
			gr1.query();
			while(gr1.next()) {
				gr1.setValue('timeout_expired',true);
				gr1.setValue('timeout_triggered_by',timeoutBy);	
				gr1.setValue('timeout_triggered_at',timeoutAt);	
				gr1.update();
				var processing_record_sys_id = gr1.getValue('processing_record_sys_id') || '';
				var processing_record_sys_id2 = processing_record_sys_id.toString();
				if (processing_record_sys_id2.length > 0) {
					var cmdbChangesTimeoutCnt2 = this.trackingTableTimeout(processing_record_sys_id,timeoutBy,timeoutAt);
					// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
					cmdbChangesTimeoutCnt = cmdbChangesTimeoutCnt + cmdbChangesTimeoutCnt2;
				}
			}
		}
		// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
		return cmdbChangesTimeoutCnt;
	},

	trackingTableTimeout: function(sys_id,timeoutBy,timeoutAt) {
		var trackingTable = 'x_tekso_twxapp01_cmdb_changes';	
		var sys_id2 = sys_id.toString();
		
		// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
		var cmdbChangesTimeoutCnt = 0;
		if (sys_id2.length > 0) {
			var gr1 = new GlideRecordSecure(trackingTable);
			gr1.addQuery('sys_id',sys_id2);
			gr1.query();
			while(gr1.next()) {
				
				// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
				cmdbChangesTimeoutCnt++;
				var no_of_times_sent = gr1.getValue('no_of_times_sent_to_ucontrol') || 0;
				var max_retries = gr1.getValue('max_retries') || 0;
				if (no_of_times_sent > max_retries) {
					gr1.setValue('status','Timeout Expired');					
				}
				else {
					gr1.setValue('status','Pending');
					gr1.setValue('processing_id','');					
				}
				gr1.setValue('timeout_expired',true);
				gr1.setValue('timeout_triggered_by',timeoutBy);	
				gr1.setValue('timeout_triggered_at',timeoutAt);	
				var cnt = gr1.getValue('timeout_expired_count') || 0;
				var cnt2 = parseInt(cnt);
				cnt2++;
				gr1.setValue('timeout_expired_count',cnt2);
				gr1.update();			
			}
		}
		// Number of x_tekso_twxapp01_cmdb_changes records that have timeout expired
		return cmdbChangesTimeoutCnt;
	},

	processSummary: function(recCnt,updCnt,delCnt) {
		// Builds a string like this: 3 processed (3 updates , 0 deletes)
		var rtn = '';
		if (recCnt < 1) {
			rtn = '0 processed';			
		}
		else {
			if (recCnt == 1) {
				rtn = '1 processed';
			}
			else {
				rtn = recCnt.toString() + ' processed';
			}	

			if (updCnt == 1) {
				rtn = rtn + ' (1 update';
			}
			else {
				rtn = rtn + ' (' + updCnt.toString() + ' updates';
			}

			if (delCnt == 1) {
				rtn = rtn + ' , 1 delete)';
			}
			else {
				rtn = rtn + ' , ' + delCnt.toString() + ' deletes)';
			}
		}
		return rtn;
	},	

	timeoutExpiredSummary: function(recCnt,updCnt,delCnt) {
		// Builds a string like this: 3 timeout expired (3 updates , 0 deletes)
		var rtn = '';
		if (recCnt < 1) {
			rtn = '0 timeout expired';			
		}
		else {
			if (recCnt == 1) {
				rtn = '1 timeout expired';
			}
			else {
				rtn = recCnt.toString() + ' timeout expired';
			}	

			if (updCnt == 1) {
				rtn = rtn + ' (1 update';
			}
			else {
				rtn = rtn + ' (' + updCnt.toString() + ' updates';
			}

			if (delCnt == 1) {
				rtn = rtn + ' , 1 delete)';
			}
			else {
				rtn = rtn + ' , ' + delCnt.toString() + ' deletes)';
			}
		}
		return rtn;
	},	
	
    type: 'TimeoutExpired'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>robin</sys_created_by>
        <sys_created_on>2020-07-15 11:50:22</sys_created_on>
        <sys_id>fa319b0ddb8a98104f29252b1396193c</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>TimeoutExpired</sys_name>
        <sys_package display_value="Application 1" source="x_tekso_twxapp01">993be4b2db62085035a38a72399619a7</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Application 1">993be4b2db62085035a38a72399619a7</sys_scope>
        <sys_update_name>sys_script_include_fa319b0ddb8a98104f29252b1396193c</sys_update_name>
        <sys_updated_by>robin</sys_updated_by>
        <sys_updated_on>2020-07-30 10:48:56</sys_updated_on>
    </sys_script_include>
</record_update>
